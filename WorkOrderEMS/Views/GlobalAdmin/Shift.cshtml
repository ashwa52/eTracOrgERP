@model WorkOrderEMS.Models.LocationMasterModel
@{
    ViewBag.Title = "Add New Location";
    //Layout = "~/Views/Shared/_NewAdminLayout.cshtml";
    Layout = null;
    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    string loginUserName = "", loginUserEmail = "", loginUserContactNo = "", loginUserProfile = "";
    long loginUserType = 0;
    long locationId = 0;
    string ServiceId = string.Empty;
    if (ObjLogin != null)
    {
        loginUserName = ObjLogin.FName + "'s";
        loginUserEmail = ObjLogin.Email;
        loginUserProfile = ObjLogin.UserProfile;
        loginUserType = ObjLogin.UserRoleId;
        //loginUserContactNo = ObjLogin.ContactNo;
        locationId = ObjLogin.LocationID;
    }
    if (ViewBag.UpdateMode == true)
    {
        ViewBag.Title = "Update Location"; ServiceId = ViewBag.ServicesID;
    }
}
<link href="~/Content/NewAdminContent/VENDOR/bootstrap-multiselect/css/bootstrap-multiselect.css" rel="stylesheet" />
<link href="~/Content/NewAdminContent/VENDOR/jquery-steps/css/jquery.steps.css" rel="stylesheet" />
<link href="@Url.Content("~/Content/datepicker.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/bootstrap-datetimepicker.min.css")" rel="stylesheet" />
<!-- daterange picker -->
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/daterangepicker/daterangepicker-bs3.css")" />
<!-- Bootstrap Color Picker -->
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/colorpicker/bootstrap-colorpicker.min.css")" />
<!-- Bootstrap time Picker -->
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/timepicker/bootstrap-timepicker.min.css")" />
<link href="~/Content/NewAdminContent/CSS/style.css" rel="stylesheet" />
<div class="content-body">
    <div class="container-fluid">
        <!-- row -->
        <div class="row">
            <div class="col-xl-12 col-xxl-12">
                <div class="card" data-aos="fade-up">
                    <div class="card-header headerSize">
                        <h4 class="card-title" style="color:white;"><strong>Add Location</strong></h4>
                    </div>
                    <div class="card-body">
                        <form action="@Url.Action("LocationSetup", "GlobalAdmin")" method="post" id="step-form-horizontal" class="step-form-horizontal">
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.LocationId)
                            <div>
                                <h4>Location Info</h4>
                                <section>
                                    <div class="basic-form">
                                        <div class="form-group row">
                                            @Html.LabelFor(model => model.LocationName, new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.LocationName, new { @Placeholder = "Location Name", @class = "form-control input-rounded required isValidLocationName" })
                                                <span style="display:none;" data-valmsg-replace="true" class="field-validation-error"><span class="">Location Name already exists.</span></span>
                                            </div>
                                            @Html.LabelFor(model => model.Address1, new { @class = "col-sm-1 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.Address1, new { @Placeholder = "Location Address", @class = "form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.Address1)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.LabelFor(model => model.Address2, new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.Address2, new { @Placeholder = "Location Code", @class = "form-control input-rounded", @maxLength = "20" })
                                                @Html.ValidationMessageFor(model => model.Address2)
                                            </div>
                                            @Html.LabelFor(model => model.CountryId, new { @class = "col-sm-1 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.Country != null)
                                                {
                                                    @Html.DropDownListFor(model => model.CountryId, new SelectList(ViewBag.Country, "CountryID", "CountryName"), WorkOrderEMS.Helper.Constants.ConfigCountryValue, new { @class = "form-control input-rounded requiredselect", @id = "Country", @onchange = "BindState()" })
                                                }
                                                else
                                                {
                                                    <select id="Country" class="form-control input-rounded requiredselect"><option value="-1">--Select--</option></select>
                                                }
                                                @Html.ValidationMessageFor(model => model.CountryId)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.LabelFor(model => model.StateId, new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.StateList != null)
                                                {
                                                    @Html.DropDownListFor(model => model.CountryId, new SelectList(ViewBag.StateList, "StateId", "StateName"), "--Select State--", new { @class = "form-control input-rounded requiredselect", @id = "State" })
                                                }
                                                else
                                                {
                                                    <select id="States" name="StateId" class="form-control input-rounded required requiredselect locationstate"><option value="0">Select</option></select>
                                                }
                                                @Html.ValidationMessageFor(model => model.StateId)
                                            </div>
                                            @Html.LabelFor(model => model.ZipCode, new { @class = "col-sm-1 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ZipCode, new { @Placeholder = "Location Zip Code", @minLength = "5", @maxLength = "5", @pattern = "[0-9]", @class = "Postal form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.ZipCode)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.LabelFor(model => model.City, new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.City, new { @Placeholder = " City", @maxLength = "100", @class = "form-control input-rounded required LetterOnlyFr" })
                                                @Html.ValidationMessageFor(model => model.City)
                                            </div>
                                            @Html.LabelFor(model => model.PhoneNo, new { @class = "col-sm-1 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.PhoneNo, new { @Placeholder = "Phone no", @pattern = "[0-9]", @class = "Phone  form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.PhoneNo)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.LabelFor(model => model.LocationType, new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.LocationTypeList != null)
                                                {
                                                    @Html.DropDownListFor(model => model.LocationType, new SelectList(ViewBag.LocationTypeList, "Value", "Text"), "--Select--", new { @class = "form-control input-rounded requiredselect", @id = "LocationType" })
                                                }
                                                else
                                                {
                                                    <select id="Country" class="form-control input-rounded requiredselect"><option value="-1">--Select--</option></select>
                                                }
                                                @Html.ValidationMessageFor(model => model.LocationType)
                                            </div>
                                            @Html.Label("Location Services", new { @class = "col-sm-1 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.DropDownList("Services", new SelectList(ViewBag.Services, "ServiceID", "ServiceName", "Description"), new { @id = "ddlServices", @multiple = "multiple", @class = "form-control input-rounded basic-multiselect" })
                                                <span style="display: none; color:red;" class="">Select at least one service for this location.</span>
                                                @Html.Hidden("ServicesID")
                                            </div>
                                            @*<div id="test" style="display:none;">
                                                    @Html.LabelFor(model => model.Description, new { @class = "col-sm-2 col-form-label" })
                                                    <div class="col-sm-4">
                                                        @Html.TextAreaFor(model => model.Description, new { @Placeholder = "Location Description", @class = "form-control input-roundedresize", @style = "border-radius: 20px;", @rows = "4", @id = "comment" })
                                                        @Html.ValidationMessageFor(model => model.Description)
                                                    </div>
                                                </div>*@
                                        </div>
                                        <div class="form-group row">
                                            @Html.LabelFor(model => model.Description, new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextAreaFor(model => model.Description, new { @Placeholder = "Location Description", @class = "form-control input-roundedresize", @style = "border-radius: 20px;", @rows = "4", @id = "comment" })
                                                @Html.ValidationMessageFor(model => model.Description)
                                            </div>
                                            @Html.Label("Location Sub Type", new { @class = "col-sm-1 col-form-label test", @style = "display:none;" })
                                            <div class="col-sm-4">
                                                @Html.DropDownListFor(model => model.LocationSubType, new SelectList(ViewBag.LocationTypeList, "Value", "Text"), "--Select--", new { @class = "form-control input-rounded requiredselect test", @style = "display:none;", @id = "LocationSubType" })
                                                @Html.ValidationMessageFor(model => model.LocationSubType)
                                            </div>
                                        </div>
                                    </div>
                                </section>
                                <h4>Contract</h4>
                                <section>
                                    <div class="basic-form">
                                        <div class="form-group row">
                                            @Html.Label("Contract Holder", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.CompanyHolder != null)
                                                {
                                                    <select name="@Html.Name("ContractDetailsModel.ContractHolder")"
                                                            id="@Html.Id("ContractHolder")" class="form-control input-rounded requiredselect">
                                                        <option>--Select Contract Holder--</option>
                                                        @foreach (var Ch in ViewBag.CompanyHolder)
                                                        {
                                                            <option value="@Ch.CompanyId" data-Type="@Ch.ContractTypeId"
                                                                    @*@if (Ch.UserId == Model.EmployeeName) { @: selected="selected"*@>
                                                                @Ch.CompanyName
                                                            </option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {<select class="form-control input-rounded requiredselect nodisable" name="ContractDetailsModel.Contractholder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractHolder)
                                            </div>
                                            @Html.Label("Operating Company", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.OperatingHolder != null)
                                                {
                                                    <select name="@Html.Name("ContractDetailsModel.OperatingHolder")"
                                                            id="@Html.Id("OperatingHolder")" class="form-control input-rounded requiredselect">
                                                        <option>--Select Operating Holder--</option>
                                                        @foreach (var Oh in ViewBag.OperatingHolder)
                                                        {
                                                            <option value="@Oh.CompanyId" data-Type="@Oh.ContractTypeId"
                                                                    @*@if (Ch.UserId == Model.EmployeeName) { @: selected="selected"*@>
                                                                @Oh.CompanyName
                                                            </option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {<select class="form-control input-rounded requiredselect required requiredselect nodisable" name="ContractDetailsModel.OperatingHolder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.OperatingHolder)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.Label("Contract Start Date", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ContractDetailsModel.ContractStartDate, null, new { @Placeholder = "Contract Start Time", @id = "ContractStartDate", @class = "form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractStartDate)
                                            </div>
                                            @Html.Label("Contract End Date", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ContractDetailsModel.ContractEndDate, null, new { @Placeholder = "Contract End Time", @class = "form-control input-rounded", @id = "ContractEndDate", @onkeydown = "return false;" })
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractEndDate)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.Label("Contract type", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.ContractType != null)
                                                {
                                                    @Html.DropDownListFor(model => model.ContractDetailsModel.ContractType, new SelectList(ViewBag.ContractType, "ContractTypeId", "ContractType"), "--Select Contract Type--", new { @class = "form-control input-rounded", @id = "ContractType" })}
                                                else
                                                {<select class="form-control input-rounded required requiredselect nodisable" name="ContractDetailsModel.ContractType" id="ContractDetailsModel.ContractType"><option value="">--Select--</option></select>}
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractType)
                                            </div>
                                            @Html.Label("Client Invoicing Term", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.ClientInvoicingTerm != null)
                                                {
                                                    @Html.DropDownListFor(model => model.ContractDetailsModel.ClientInvoicingTerm, new SelectList(ViewBag.ClientInvoicingTerm, "ClientInvoicingId", "ClientInvoicingName"), "--Select Client Invoicing Term--", new { @class = "form-control input-rounded", @id = "ClientInvoicingTerm" })}
                                                else
                                                {<select class="form-control input-rounded required requiredselect nodisable" name="ContractDetailsModel.ClientInvoicingTerm" id="ClientInvoicingTerm"><option value="">--Select Client Invoicing Term--</option></select>}
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ClientInvoicingTerm)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.Label("Reporting Type", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @if (ViewBag.AdministratorList != null)
                                                {
                                                    <select name="ContractDetailsModel.ReportingType" id="ReportingType" class="form-control input-rounded">
                                                        <option value="0">--Select--</option>
                                                        <option value="Weekly">Weekly</option>
                                                        <option value="Monthly">Monthly</option>
                                                        <option value="Quarterly">Quarterly</option>
                                                    </select>
                                                }
                                                else
                                                {<select class="form-control input-rounded required requiredselect nodisable" name="ReportingType" id="ddlReportingType"><option value="">--Select--</option></select>}
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ReportingType)
                                            </div>
                                            @Html.Label("Reporting Date", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ContractDetailsModel.ReportingDate, null, new { @Placeholder = "Reporting Date", @id = "ReportingDate", @class = "form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.ReportingDate)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.Label("Monthly Intercompany Managment Fee", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ContractDetailsModel.IntercompanyMgmFee, null, new { @Placeholder = "Intercompany Managment Fee", @class = "form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.IntercompanyMgmFee)
                                            </div>
                                            @Html.Label("Monthly Intercompany Invoicing", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ContractDetailsModel.IntercompanyInvoicing, null, new { @Placeholder = "Inetercompany Invoicing", @id = "IntercompanyInvoicing", @class = "form-control input-rounded" })
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.IntercompanyInvoicing)
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            @Html.Label("Additional Years", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-2">
                                                @Html.RadioButtonFor(model => model.ContractDetailsModel.AdditonalYears, true, new { @class = "AddYears" })&nbsp;Yes &nbsp;
                                            </div>
                                            <div class="col-sm-2">
                                                @Html.RadioButtonFor(model => model.ContractDetailsModel.AdditonalYears, false, new { @class = "AddYears" })&nbsp;No
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.AdditonalYears)
                                            </div>
                                            @Html.Label("Years", new { @class = "col-sm-2 col-form-label YearsDiv", @style = "display:none;" })
                                            <div class="col-sm-4">
                                                @Html.TextBoxFor(model => model.ContractDetailsModel.Years, null, new { @Placeholder = "Years", @class = "form-control input-rounded YearsDiv", @style = "display:none;" })
                                                @Html.ValidationMessageFor(model => model.ContractDetailsModel.Years)
                                            </div>
                                        </div>
                                    </div>
                                </section>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="myModalForContract">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Contract</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="divDetailPreview" class="">
                    <div class="row">
                        <div class="" id="DivContractDetailsIndex">
                            <center><span><b>Is Contract Holder company and Operating Company same.</b></span></center>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button data-dismiss="modal" class="btn btn-default" id="btnCancelForSameCompany">No</button>
                <button data-dismiss="modal" class="btn btn-primary" id="YesForSameCompany">Yes</button>
            </div>
        </div>
    </div>
</div>
<!--**********************************
    Content body end
***********************************-->
<script src="~/Content/NewAdminContent/VENDOR/jquery-steps/build/jquery.steps.min.js"></script>
<script src="~/Content/NewAdminContent/VENDOR/jquery-validation/jquery.validate.min.js"></script>
<script src="~/Scripts/NewAdminJS/plugins-init/jquery.validate-init.js"></script>
<script src="~/Scripts/NewAdminJS/plugins-init/jquery-steps-init.js"></script>
<script src="~/Content/NewAdminContent/VENDOR/bootstrap-multiselect/js/bootstrap-multiselect.js"></script>
<script src="~/Scripts/NewAdminJS/plugins-init/bootstrap-multiselect-init.js"></script>
<script src="@Url.Content("~/Scripts/bootstrap-datepicker.js")"></script>
<!-- daterangepicker -->
<script src="@Url.Content("https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js")"></script>
<script src="@Url.Content("~/Content/Dashboard/plugins/daterangepicker/daterangepicker.js")"></script>
<!-- bootstrap color picker -->
<script src="@Url.Content("~/Content/Dashboard/plugins/colorpicker/bootstrap-colorpicker.min.js")"></script>
<!-- bootstrap time picker -->
<script src="@Url.Content("~/Content/Dashboard/plugins/timepicker/bootstrap-timepicker.min.js")"></script>
<script type="text/javascript" src="~/Scripts/BindDropDown/DropDownList.js"></script>
@section Scripts {
    <script type="text/javascript">
    $_GetLocationSubTypeByLocationTypeIdUrl = '@Url.Action("GetLocationSubType", "Dropdown")';
    $_LocationTypeID = '@Html.ValueFor(model => model.LocationSubType)';
        $_ServiceID = '@ServiceId';
    </script>
}
<script>
    $(document).ready(function () {
        debugger
        if('@ViewBag.UpdateMode' == 'True')
        {
            $(".submitLocationData").show();
            $(".actions a[href$='#next']").html("");
            $(".actions a[href$='#finish']").html("");
            $(".actions a[href$='#next']").html("<i class='fa fa-long-arrow-right' aria-hidden='true' style='font-size: 33px;'></i>");
            $(".actions a[href$='#previous']").html("<i class='fa fa-long-arrow-left' aria-hidden='true' style='font-size: 33px;'></i>");
            $(".actions a[href$='#finish']").html("<input type='submit' class='btn btn-secondary submitLocationData btn-rounded' value='Submit'>");
            var $_ServiceID = '@ViewBag.ServicesID';
            var Arr = $_ServiceID.split(',');

            for (var i = 0; i < Arr.length; i++) {
                $("#ddlServices").multiselect("select", $.trim(Arr[i]));
            }
            $("#ddlServices").multiselect('rebuild');
            var $_ContractHolderId = @ViewBag.ContractHolderId;
            var $_OperatingHolderId = @ViewBag.OperatingHolderId;
            var $_ReportingTypeId = "@ViewBag.ReportingTypeId";
            if($_ContractHolderId != null && $_ContractHolderId != "")
            {
                $("#ContractHolder").val($_ContractHolderId);
            }
            if($_OperatingHolderId != null && $_OperatingHolderId != "")
            {
                $("#OperatingHolder").val($_OperatingHolderId);
            }
            if($_ReportingTypeId != null && $_ReportingTypeId != "")
            {
                $("#ReportingType").val($_ReportingTypeId);
            }
        }
        $('#ContractStartDate,#ContractEndDate,#ReportingDate,#IntercompanyInvoicing').datepicker({
            format: "mm/dd/yyyy",
            startDate: new Date()
        });

        $(".submitLocationData").show();
        $(".actions a[href$='#next']").html("");
        $(".actions a[href$='#finish']").html("");
        $(".actions a[href$='#next']").html("<i class='fa fa-long-arrow-right' aria-hidden='true' style='font-size: 33px;'></i>");
        $(".actions a[href$='#previous']").html("<i class='fa fa-long-arrow-left' aria-hidden='true' style='font-size: 33px;'></i>");
        $(".actions a[href$='#finish']").html("<input type='submit' class='btn btn-secondary submitLocationData btn-rounded' value='Submit'>");
    })
    $(".AddYears").change(function () {
        if ($(this).val() == "True") {
            $(".YearsDiv").show();
        }
        else {
            $(".YearsDiv").hide();
        }
    });

    $("#LocationType").change(function () {
        debugger
        var value = this.value;
        if (value == "107") {
            $(".test").show();
            // BindLocationType();
        }
        else {
            $(".test").attr({ style: "display:none" });
        }
    });
    $("#ContractHolder").change(function () {
        contractVal = $("#ContractHolder option:selected").val();
        var ContractType = $("#ContractHolder option:selected").attr('data-Type');
        if (ContractType == 2) {
            $("#myModalForContract").modal('show');
        }
        else {
            $('#OperatingHolder').removeAttr('disabled');
        }
    });
    $('#YesForSameCompany').click(function (e) {
        debugger
        $('#OperatingHolder').val(contractVal).trigger('change');
        $('#OperatingHolder').attr('disabled', 'disabled');
        $('#ContractDetailsModel_OperatingHolderSameId').val(contractVal);
    })
    $('#btnCancelForSameCompany').click(function (e) {
        debugger
        $('#OperatingHolder').removeAttr('disabled');
    })
</script>
