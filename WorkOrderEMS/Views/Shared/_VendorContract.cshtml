@model WorkOrderEMS.Models.VendorSetupManagementModel
@*@model dynamic*@
@{
    long UserType = 0; bool GloblaAdminUser, ITAdminUser, OnlyAdminUser, ManagerUser, EmployeeUser, ClientUser;
    GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    if (ObjLogin != null)
    {
        UserType = ObjLogin.UserRoleId;

        #region Get Active User Type Flag
        /*Get Active User Type Flag*/

        switch ((WorkOrderEMS.Helper.UserType)ObjLogin.UserRoleId)
        {
            case WorkOrderEMS.Helper.UserType.GlobalAdmin:
                GloblaAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.ITAdministrator:
                ITAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Administrator:
                OnlyAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Manager:
                ManagerUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Employee:
                EmployeeUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Client:
                ClientUser = true;
                break;
            default:
                GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
                break;
        }

        /*Get Active User Type Flag*/
        #endregion Get Active User Type Flag
    }
    else
    {
        WorkOrderEMS.Helper.AlertMessageClass ObjAlertMessageClass = new WorkOrderEMS.Helper.AlertMessageClass();
        ViewBag.AlertMessageClass = ObjAlertMessageClass.Danger; ViewBag.Message = WorkOrderEMS.Helper.CommonMessage.SessionExpired();
        Response.Redirect("~/Views/Shared/_GlobalAdminLayout.cshtml");
    }

    string myModelprefix = ViewBag.myModelprefixName;
    string UserTypeControlName = myModelprefix + "UserType";
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    string Controller = string.Empty, ActionName = string.Empty;
    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    string ContractDocPath = System.Configuration.ConfigurationManager.AppSettings["CompanyDocuments"];

    if (routeValues != null)
    {
        if (routeValues.ContainsKey("controller"))
        {
            Controller = ViewContext.RouteData.GetRequiredString("controller");
            //Controller = routeValues["controller"].ToString();
        }
        if (routeValues.ContainsKey("action"))
        {
            ActionName = ViewContext.RouteData.GetRequiredString("action");
        }
    }

    long hiddnUserType = 0;
    if (!string.IsNullOrEmpty(ViewBag.ActionSection) && (ViewBag.ActionSection == "employee" || ViewBag.ActionSection == "user"))
    { hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Employee); }

}
<link href="~/Content/NewAdminContent/VENDOR/bootstrap-multiselect/css/bootstrap-multiselect.css" rel="stylesheet" />
<link href="~/Content/NewAdminContent/VENDOR/jquery-steps/css/jquery.steps.css" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/bootstrap-datepicker.js")"></script>
@*<style>
        .checkbox, .radio {
            position: relative;
            display: block;
            margin-top: 0px !important;
            margin-bottom: 12px !important;
        }

        .roundedtext {
            border-radius: 12px
        }

        ::-webkit-input-placeholder {
            font-style: italic;
        }

        :-moz-placeholder {
            font-style: italic;
        }

        ::-moz-placeholder {
            font-style: italic;
        }

        :-ms-input-placeholder {
            font-style: italic;
        }

        .top-row > div {
            float: left;
            width: 48%;
            margin-right: 4%;
        }

        input[type="radio"] {
            height: 20px;
            width: 20px;
            background-color: #4475b5;
            color: #4475b5;
        }
    </style>*@
@Html.ValidationSummary(true)
<input type="hidden" value='@hiddnUserType' name='@UserTypeControlName'>
<input type="hidden" name="UserModel.EmployeeCategory" id="UserCategory" value='@Controller' />

<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput-1.3.min.js")"></script>

<div class="panel panel-primary setup-content" id="myVendorContractDetails">
    <div class="basic-form">
        <div class="form-group row">
            <label class="col-sm-2 col-form-label" id="lblFirstCompany" for=" FirstCompany">  First Company<span class="req">*</span></label>
            <div class="col-sm-4">
                @if (ViewBag.OperatingHolder != null)
                {
                    @Html.DropDownList(myModelprefix + "FirstCompany", new SelectList(ViewBag.OperatingHolder, "CompanyId", "CompanyName"), "--Select First Company--", new { @id = "FirstCompany", @class = "form-control input-rounded" })}
                else
                {
                    <select class="form-control form-control input-rounded" name="ContractDetailsModel.OperatingHolder" id="ddlContractHolder"><option value="">--Select--</option></select>
                }
                @Html.ValidationMessageFor(model => model.VendorContractModel.FirstCompany)
            </div>

            <label class="col-sm-2 col-form-label" id="lblSecondaryCompany" for="LicenseName">  Secondary Company<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.SecondaryCompany, null, new { @id = "SecondaryCompany", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.SecondaryCompany)
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label"> Vendor Type<span class="req">*</span></label>
            <div class="col-sm-4">
                @if (ViewBag.VendorType != null)
                {
                    {@Html.DropDownList(myModelprefix + "VendorType", new SelectList(ViewBag.VendorType, "VendorTypeId", "VendorTypeName"), "--Select Vendor Type--", new { @id = "VendorTypeContract", @class = "form-control input-rounded" })}
            }
            else
            {
                <select id="VendorType" class="form-control input-rounded"><option value="-1">@ViewBag.VendorType</option></select>
            }
                <div class="errorspace">
                    @Html.ValidationMessage(myModelprefix + "VendorType")
                </div>
            </div>

            <label class="col-sm-2 col-form-label" id="lblContractType"> Contract Type<span class="req">*</span></label>
            <div class="col-sm-4">
                @if (ViewBag.ContractType != null)
                {
                    {@Html.DropDownListFor(model => model.VendorContractModel.ContractType, new SelectList(ViewBag.ContractType, "ContractTypeId", "ContractType"), "--Select Contract Type--", new { @id = "ContractType", @class = "form-control input-rounded" })}
            }
            else
            {
                <select id="ContractType" class="form-control input-rounded"><option value="-1">@ViewBag.ContractType</option></select>
            }
                <div class="errorspace">
                    @Html.ValidationMessageFor(model => model.VendorContractModel.ContractType)
                </div>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">  Contract issued by<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.RadioButtonFor(model => model.VendorContractModel.ContractIssuedBy, "Own",new { @class="rbtn" })<span class="radio_span">
    &nbsp;Own &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    @Html.RadioButtonFor(model => model.VendorContractModel.ContractIssuedBy, "Vendor", new { @style = "margin-left:20%;", @class = "radio rbtn" })<span class="radio_span">
    &nbsp;Vendor</span>
    @Html.ValidationMessageFor(model => model.VendorContractModel.ContractIssuedBy)
</div>

            <label class="col-sm-2 col-form-label">  Select Location<span class="req">*</span></label>
            <div class="col-sm-4">

                @if (ViewBag.LocationListData != null)
                {
                    {@Html.DropDownListFor(model => model.VendorContractModel.SectVendorToLocation, new SelectList(ViewBag.LocationListData, "LocationId", "LocationName"), new { @id = "SelectVendorToLocation", @style = "width:50%;", @multiple = "multiple", @class = "form-control" })}
                <span id="vendorAllocationRequiredError" class="field-validation-error"  data-valmsg-replace="true">

                </span>
            }
            @*@if (ViewBag.LocationListData != null)
                {
                    {@Html.DropDownList(myModelprefix + "SelectVendorToLocation", new SelectList(ViewBag.LocationListData, "LocationId", "LocationName"), new { @id = "SelectVendorToLocation", @multiple = "multiple", @class = "form-control" })}
                 }*@
            else
            {
                <select id="VendorContractModel.SectVendorToLocation" class="form-control"><option value="-1">@ViewBag.LocationListData</option></select>
            }
                @*@Html.DropDownList("SectVendorToLocation", new SelectList((List<WorkOrderEMS.Models.UserLocations>)Session["eTrac_UserLocations"], "LocationId", "LocationName"), new { @id = "SectVendorToLocation", @multiple = "multiple", @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.VendorContractModel.SectVendorToLocation)
                @Html.Hidden("SelectedLcation")

            </div>
        </div>

        <div class="form-group row ContractExecutedByHideShow1" style="display:none;">
            <label class="col-sm-2 col-form-label"> Contract executed by <span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.RadioButtonFor(model => model.VendorContractModel.ContractExecutedBy, "Own", false)<span class="radio_span">
    &nbsp;Own &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    @Html.RadioButtonFor(model => model.VendorContractModel.ContractExecutedBy, "Vendor", new { @class = "ContractExecutedClass", @style = "margin-left:20%;" })<span class="radio_span">
    &nbsp;Vendor</span>
    @Html.ValidationMessageFor(model => model.VendorContractModel.ContractExecutedBy)
</div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">  Primary Payment Mode<span class="req">*</span></label>
            <div class="col-sm-4">
                @if (ViewBag.PaymentModeList != null)
                {
                    {@Html.DropDownListFor(model => model.VendorContractModel.PrimaryPaymentMode, new SelectList(ViewBag.PaymentModeList, "PaymentModeId", "PaymentModeName"), "--Select Payment Mode--", new { @id = "PrimaryPaymentMode", @class = "form-control input-rounded" })}
            }
            else
            {
                <select id="VendorType" , class="form-control input-rounded"><option value="-1">@ViewBag.PaymentModeList</option></select>
            }
                @Html.ValidationMessageFor(model => model.VendorContractModel.PrimaryPaymentMode)
            </div>

            <label class="col-sm-2 col-form-label">  Payment Term<span class="req">*</span></label>
            <div class="col-sm-4">
                @if (ViewBag.PaymentTermList != null)
                {
                    {@Html.DropDownListFor(model => model.VendorContractModel.PaymentTerm, new SelectList(ViewBag.PaymentTermList, "PaymentTermId", "PaymentTermName"), "--Select Payment Term--", new { @id = "PaymentTerm", @class = "form-control input-rounded" })}
            }
            else
            {
                <select id="VendorType" class="form-control input-rounded"><option value="-1">@ViewBag.PaymentTermList</option></select>
            }
                @Html.ValidationMessageFor(model => model.VendorContractModel.PaymentTerm)
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">  Grace Period<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.GracePeriod, null, new { @id = "GracePeriod", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.GracePeriod)
            </div>
            <label class="col-sm-2 col-form-label">Invoicing Frequency<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.DropDownListFor(model => model.VendorContractModel.InvoicingFrequecy, new List<SelectListItem>
                                                            {
                                                               new SelectListItem() {Text = "--Select Invoicing Frequency--", Value="0"},
                                                               new SelectListItem() {Text = "Weekly", Value="Weekly"},
                                                               new SelectListItem() {Text = "Monthly", Value="Monthly"},
                                                               new SelectListItem() {Text = "Quarterly", Value="Quarterly"},
                                                               new SelectListItem() {Text = "Yearly", Value="Yearly"},
                                                             }, new { @id = "InvoicingFrequecy", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.InvoicingFrequecy)
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Is Reccurence for PO.?<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.RadioButtonFor(model => model.VendorContractModel.ReccurenceForPO, "Y")<span class="radio_span">
    &nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    @Html.RadioButtonFor(model => model.VendorContractModel.ReccurenceForPO, "N", new { @style = "margin-left:20%;" })<span class="radio_span">
    &nbsp;No</span>
    @Html.ValidationMessageFor(model => model.VendorContractModel.ReccurenceForPO)
</div>

            <label class="col-sm-2 col-form-label AllocationNeededClass" style="display:none;"> Allocation Needed :<span class="req">*</span></label>
            <div class="col-sm-4 AllocationNeededClass" style="display:none;">
                @Html.RadioButtonFor(model => model.VendorContractModel.AllocationNeeded, 1, false)<span class="radio_span">
    &nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    @Html.RadioButtonFor(model => model.VendorContractModel.AllocationNeeded, 2, new { @style = "margin-left:20%;" })<span class="radio_span">
    &nbsp;No</span>
    @Html.ValidationMessageFor(model => model.VendorContractModel.AllocationNeeded)
</div>

        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label"> Start Date<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.StartDate, null, new { @id = "StartDate", @onkeydown = "return false;", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.StartDate)
            </div>
            <label class="col-sm-2 col-form-label">   End Date<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.EndDate, null, new { @id = "EndDate", @onkeydown = "return false;", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.EndDate)
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">$ Cost During Period<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.CostDuringPeriodForView, null, new { @id = "CostDuringPeriod", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.CostDuringPeriodForView)
            </div>
            <label class="col-sm-2 col-form-label"> $ Annual Value Of Agreement<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.AnnualValueOfAggrimentForView, null, new { @id = "AnnualValueOfAggriment", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.AnnualValueOfAggrimentForView)
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label"> $ Minimum Bill Amount<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.MinimumBillAmountForView, null, new { @id = "MinimumBillAmount", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.MinimumBillAmountForView)
            </div>
            <label class="col-sm-2 col-form-label"> Bill Due Date<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.BillDueDate, null, new { @id = "BillDueDate", @onkeydown = "return false;", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.BillDueDate)
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">  Late Fine/Fee<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorContractModel.LateFineForView, null, new { @id = "LateFine", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorContractModel.LateFineForView)
            </div>
            <label class="col-sm-2 col-form-label"> Contract Document<span class="req">*</span></label>
            <div class="col-sm-4">
                <div id="dvContractPreview">
                </div>
                <input id="fileuploadContract" type="file" style="margin-left:50%;" name="VendorContractModel.ContractDocumentsFile" />
                <ul class="attachment">
                    @if (Model.VendorContractModel != null)
                    {
                        <li style="margin-left :25%;margin-top:20px;">
                            <a class="title" href="@Url.Content(ContractDocPath + myModelprefix + "ContractDocuments")">@myModelprefix + "ContractDocuments"</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
<!--Modal-->

<div class="modal bs-example-modal-lg fade preview" id="myModalForContract" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg ">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">Location Allocation (Splitting Vendor Payments)</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>×</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="form-group col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    <div id="saveAllocationError" class="alert alert-danger" style="width:600px;display:none;" role="alert">
                        This is a danger alert with . Give it a click if you like.
                    </div>
                    @Html.Hidden("LocationIds")
                    <table class="col-sm-12 col-xs-12" style="width:600px" id="percentageTable"></table>

                    <label class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12 red" style="font-size: 12px;color: #888080;" id="location-note-id"><strong>Note: </strong>Sum of all fields should be 100</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success pull-right get-blue" id="SaveLocationAllocation">Save</button>
                <button type="button" data-dismiss="modal" class="btn btn-secondary" id="btnCancelForSameCompany">cancel</button>


            </div>
        </div>
    </div>

</div>



<!--End Modal-->
<script>
    $('#CostDuringPeriod,#AnnualValueOfAggriment,#MinimumBillAmount,#LateFine').simpleMoneyFormat();
    $(document).ready(function () {
        $('#SaveLocationAllocation, #location-note-id').hide();
        $('#VendorContractModel_AllocationNeeded[value="1"]').attr('disabled', 'disabled');
        $('#VendorContractModel_AllocationNeeded[value="2"]').attr('checked', 'checked');
        var ServiceID;
        var LocationIDs;// = ViewBag.LocationListData;
        $('#VendorContractModel_AllocationNeeded[value="1"]').click(function () {
            $('#myModalForContract').modal('show');
            if ($("#percentageTable tr").length === 0) {
                locationAllocationPercentage();
            }
        });
        $('#VendorContractModel_ReccurenceForPO[value="N"]').click(function () {
            $('#VendorContractModel_AllocationNeeded[value="2"]').click();
        });
        $('#myModalForContract button[data-dismiss="modal"]').click(function () {
            $('#VendorContractModel_AllocationNeeded[value="2"]').click();
        })
        $('#VendorContractModel_AllocationNeeded[value="2"]').click(function () {
            $("#percentageTable").html('');
            $('#LocationIds').val('');
            $('#SaveLocationAllocation, #location-note-id').hide();
        });
        function locationAllocationPercentage() {
            var LocationId = $('#SelectVendorToLocation option[value!="multiselect-all"]:selected');
            var Location = [];
            if (LocationId.length > 0) {
                $('#SaveLocationAllocation, #location-note-id').show();
            } else {
                $('#SaveLocationAllocation, #location-note-id').hide();
            }
            var inputValue = $('.location-allocation-input').map(function (i, ele) {
                return { value: $(ele).val(), id: $(ele).attr('id') };
            });
            $("#percentageTable").html('');
            var value = parseInt(100 / LocationId.length);
            var firstValue = value;
            if (value * LocationId.length < 100) {
                firstValue = value + parseInt(100 - (value * LocationId.length));
            }
            $(LocationId).each(function (index, Services) {
                var ll = $(LocationId).val();
                var llText = $(this).text();
                if (ll != undefined && parseInt(ll) > 0) {
                    var markup = "<tr><td width='60%'> " + llText + "</td><td width='40%' style='padding: 6px 0;'><input value='" + (index === 0 ? firstValue : value) + "' type='number' max='100' class='location-allocation-input form-control input-rounded' id='id_" + $(this).val() + "'></td></tr>";
                    Location.push({ value: $(this).val(), id: 'id_' + $(this).val() });
                    $("#percentageTable").append(markup);

                }
            });
            $.each(inputValue, function (i, val) {
                $('input#' + val.id).val(val.value);
            });
            $("#LocationAllocateId").val(Location);
        }
        $('#SelectVendorToLocation').multiselect({
            maxHeight: '300',
            onChange: function (element, checked) {
                $('#vendorAllocationRequiredError').html('');
                if ($("#percentageTable tr").length > 0) {
                    $("#percentageTable").html('');
                    toastr.warning("Please reallocate vendor payment spilts.");
                    $('#vendorAllocationRequiredError').html('Please reallocate vendor payment spilts.');
                    $('#VendorContractModel_AllocationNeeded[value="2"]').click();
                }
                var LocationId = $('#SelectVendorToLocation option[value!="multiselect-all"]:selected');
                if (LocationId.length > 1) {
                    $('#VendorContractModel_AllocationNeeded[value="1"]').removeAttr('disabled');
                }
                else {
                    $('#VendorContractModel_AllocationNeeded[value="1"]').attr('disabled', 'disabled');
                }
                var VendorLocation = $('#SelectVendorToLocation option:selected');
                var VendorLoc = [];
                $(VendorLocation).each(function (index, Services) {
                    var ss = $(VendorLocation).val();
                    if (ss != undefined && parseInt(ss) > 0) {
                        VendorLoc.push([$(this).val()]);
                    }
                });
                $("#SelectedLcation").val(VendorLoc);
            }
        });
        var contractVal;
        $('#lblPrimaryPaymentMode').hide(); $('#lblPaymentTerm').hide(); $('#lblvendorInvoicingFrequency').hide();

        $("#ContractHolder").change(function () {
            contractVal = $("#ContractHolder option:selected").val();
            $("#myModalForContract").modal('show');
        });
        $("#ReccurenceForPO").change(function () {
            var ReccoringVal = $("#ReccurenceForPO option:selected").val();
            if (ReccoringVal == "Y") {
                $("#AllocationNeededClass").show();
            }
            else {
                $("#AllocationNeededClass").hide();
            }
        });

        //$("#FirstCompany").on("click", function () {
        //    $("#lblFirstCompany").addClass('active highlight');
        //    $("#lblFirstCompany").show();
        //});
        $("#ContractType").on("click", function () {
            $("#lblContractType").addClass('active highlight');
            $("#lblContractType").show();
        });
        $("#PrimaryPaymentMode").on("click", function () {
            $("#lblPrimaryPaymentMode").addClass('active highlight');
            $("#lblPrimaryPaymentMode").show();
        });
        $("#InvoicingFrequecy").on("click", function () {
            $("#lblvendorInvoicingFrequency").addClass('active highlight');
            $("#lblvendorInvoicingFrequency").show();
        });
        $("#PaymentTerm").on("click", function () {
            $("#lblPaymentTerm").addClass('active highlight');
            $("#lblPaymentTerm").show();
        });
        $("#vendorInvoicingFrequency").on("click", function () {
            $("#lblvendorInvoicingFrequency").addClass('active highlight');
            $("#lblvendorInvoicingFrequency").show();
            $('.ContractExecutedClass').prop('checked', true);
        });
        $(function () {
            $("#fileuploadContract").change(function () {
                $("#dvContractPreview").html("");
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.pdf|.doc|.txt)$/;
                if (regex.test($(this).val().toLowerCase())) {
                    if ($.browser.msie && parseFloat(jQuery.browser.version) <= 9.0) {
                        $("#dvContractPreview").show();
                        $("#dvContractPreview")[0].filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = $(this).val();
                    }
                    else {
                        if (typeof (FileReader) != "undefined") {
                            $("#dvContractPreview").show();
                            // $("#dvContractPreview").append("<img />");
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $("#dvContractPreview").attr("src", e.target.result);
                            }
                            reader.readAsDataURL($(this)[0].files[0]);
                        } else {
                            alert("This browser does not support FileReader.");
                        }
                    }
                }
            })
        })

        $('#BillDueDate,#StartDate,#EndDate').datepicker({
            format: "mm/dd/yyyy",
            startDate: new Date(),

        });
        $("#EndDate").change(function () {
            var _startDate = $("#StartDate").val();
            var _value = $(this).val();
            if (_startDate != "") {
                if (Date.parse(_value) < Date.parse(_startDate)) {
                    alert("End Date always greater then or equal to Start Date.");
                    return false;
                }
            }

        })
        var saveAllocationError = $('#saveAllocationError');
        $('#SaveLocationAllocation').click(function () {
            saveAllocationError.hide();
            var sumNumber = 0;
            var inputs = $('input.location-allocation-input[type=number]').map(function (i, v) {
                return {
                    LocationId: parseInt($(this).attr('id').replace("id_", "")),
                    Percentage: $(this).val()
                };
            }).get();
            if (inputs.filter(x => x.Percentage <= 0).length > 0) { 
                saveAllocationError.html("Percentage should be greater than zero").show();
                return false;
            }
            $('input.location-allocation-input[type=number]').each(function (i, item) {
                var grade = $(item).val();
                sumNumber = Number(sumNumber) + Number(grade);
            })
            if (inputs.length === 0) {
                saveAllocationError.html("Select atleast one location").show(); 
                return false;
            }
            else if (sumNumber != 100) {
                saveAllocationError.html("Sum of percentage should be equal to 100").show(); 
                return false;
            }
            $('#vendorAllocationRequiredError').html('');
            $('#LocationIds').val(JSON.stringify(inputs));
            $('#myModalForContract').modal('hide');
        });
        $(".rbtn").change(function ()
        {

            if ($(this).val() == "Own")
            {
               $(".ContractExecutedByHideShow1").hide();
            }
            else if ($(this).val() == "Vendor")
            {
                 $(".ContractExecutedByHideShow1").show();
            }
           
        });
    });
</script>


