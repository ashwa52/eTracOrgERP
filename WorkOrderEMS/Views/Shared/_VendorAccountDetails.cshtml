@model WorkOrderEMS.Models.VendorSetupManagementModel
@*@model dynamic*@
@{
    long UserType = 0; bool GloblaAdminUser, ITAdminUser, OnlyAdminUser, ManagerUser, EmployeeUser, ClientUser;
    GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    if (ObjLogin != null)
    {
        UserType = ObjLogin.UserRoleId;
        #region Get Active User Type Flag
        /*Get Active User Type Flag*/ 
        switch ((WorkOrderEMS.Helper.UserType)ObjLogin.UserRoleId)
        {
            case WorkOrderEMS.Helper.UserType.GlobalAdmin:
                GloblaAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.ITAdministrator:
                ITAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Administrator:
                OnlyAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Manager:
                ManagerUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Employee:
                EmployeeUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Client:
                ClientUser = true;
                break;
            default:
                GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
                break;
        }

        /*Get Active User Type Flag*/
        #endregion Get Active User Type Flag
    }
    else
    {
        WorkOrderEMS.Helper.AlertMessageClass ObjAlertMessageClass = new WorkOrderEMS.Helper.AlertMessageClass();
        ViewBag.AlertMessageClass = ObjAlertMessageClass.Danger; ViewBag.Message = WorkOrderEMS.Helper.CommonMessage.SessionExpired();
        //throw new Exception(WorkOrderEMS.Helper.CommonMessage.SessionExpired());
        //Server.Transfer("Error");
        Response.Redirect("~/Views/Shared/_GlobalAdminLayout.cshtml");
    }

    string myModelprefix = ViewBag.myModelprefixName;
    string UserTypeControlName = myModelprefix + "UserType";
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    string Controller = string.Empty, ActionName = string.Empty;

    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    string AccountDocPath = System.Configuration.ConfigurationManager.AppSettings["CompanyDocuments"];


    if (routeValues != null)
    {
        if (routeValues.ContainsKey("controller"))
        {
            Controller = ViewContext.RouteData.GetRequiredString("controller");
            //Controller = routeValues["controller"].ToString();
        }
        if (routeValues.ContainsKey("action"))
        {
            ActionName = ViewContext.RouteData.GetRequiredString("action");
        }
    }
}
<style>
    .roundedtext {
        border-radius: 12px
    }

    ::-webkit-input-placeholder {
        font-style: italic;
    }

    :-moz-placeholder {
        font-style: italic;
    }

    ::-moz-placeholder {
        font-style: italic;
    }

    :-ms-input-placeholder {
        font-style: italic;
    }

    .top-row > div {
        float: left;
        width: 48%;
        margin-right: 4%;
    }

    input[type="radio"] {
        height: 20px;
        width: 20px;
        background-color: #4475b5;
        color: #4475b5;
    }
</style>
@Html.ValidationSummary(true)
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput-1.3.min.js")"></script>

<div class="panel panel-primary setup-content" id="myVendorAccountDetails">
    <div class="basic-form">

        <div class="form-group row">
            <label class="col-sm-2 col-form-label"> Pay Mode<span class="req">*</span></label>
            <div class="col-sm-4">
                @if (ViewBag.PaymentModeList != null)
                {
                    {@Html.DropDownListFor(model => model.VendorAccountDetailsModel.PaymentMode, new SelectList(ViewBag.PaymentModeList, "PaymentModeId", "PaymentModeName"), "--Select Payment Mode--", new { @id = "PaymentMode", @class ="form-control input-rounded" })}
            }
            else
            {
                <select id="PaymentMode" class ="form-control input-rounded"><option value="-1">@ViewBag.PaymentModeList</option></select>
            }
            </div>
        </div>

        <div class="form-group row wiredSelectHideShow" style="display:none;">
            <label class="col-sm-2 col-form-label">  Bank Name <span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.BankName, null, new { @id = "BankName", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.BankName)
            </div>

            <label class="col-sm-2 col-form-label">  Bank Location<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.BankLocation, null, new { @id = "BankLocation", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.BankLocation)
            </div>

        </div>

        <div class="form-group row wiredSelectHideShow" style="display:none;">
            <label class="col-sm-2 col-form-label">   Account Number<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.AccountNumber, null, new { @id = "AccountNumber", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.AccountNumber)
            </div>

            <label class="col-sm-2 col-form-label"> IFSC Code<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.IFSCCode, null, new { @id = "IFSCCode", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.IFSCCode)
            </div>

        </div>

        <div class="form-group row wiredSelectHideShow" style="display:none;">
            <label class="col-sm-2 col-form-label">Swift OIC Code<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.SwiftOICCode, null, new { @id = "SwiftOICCode", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.SwiftOICCode)
            </div>

            <label class="col-sm-2 col-form-label">  Account Document<span class="req">*</span></label>
            <div class="col-sm-4">
                <div id="dvAccountPreview">
                </div>
                <input id="fileuploadAccount" type="file" style="margin-left:50%;" name="VendorAccountDetailsModel.AccountDocumentsFile" />
                <ul class="attachment">
                    @if (Model.VendorAccountDetailsModel != null)
                    {
                        <li style="margin-left :25%;margin-top:20px;">
                            <a class="title" href="@Url.Content(AccountDocPath + myModelprefix + "AccountDocuments")">@myModelprefix + "AccountDocuments"</a>
                        </li>
                    }
                </ul>
            </div>

        </div>

        <div class="form-group row CardSelectHideShow" style="display:none;">
            <label class="col-sm-2 col-form-label">  Card Number<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.CardNumber, null, new { @id = "CardNumber", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.CardNumber)
            </div>

            <label class="col-sm-2 col-form-label">  Bank Name<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.BankNameForCard, null, new { @id = "BankNameForCard", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.BankNameForCard)
            </div>

        </div>
        <div class="form-group row CardSelectHideShow" style="display:none;">
            <label class="col-sm-2 col-form-label">Card Holder Name<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.CardHolderName, null, new { @id = "CardHolderName", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.CardHolderName)
            </div>

            <label class="col-sm-2 col-form-label"> Expiration Date<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorAccountDetailsModel.ExpirationDate, null, new { @id = "ExpirationDate", @onkeydown = "return false;", @class ="form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorAccountDetailsModel.ExpirationDate)
            </div>

        </div>

    </div>
</div>

<script>
    $(document).ready(function () {
        $(function () {
            $("#fileuploadAccount").change(function () {
                $("#dvAccountPreview").html("");
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.pdf|.doc|.txt)$/;
                if (regex.test($(this).val().toLowerCase())) {
                    if ($.browser.msie && parseFloat(jQuery.browser.version) <= 9.0) {
                        $("#dvAccountPreview").show();
                        $("#dvAccountPreview")[0].filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = $(this).val();
                    }
                    else {
                        if (typeof (FileReader) != "undefined") {
                            $("#dvAccountPreview").show();
                            // $("#dvContractPreview").append("<img />");
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $("#dvAccountPreview").attr("src", e.target.result);
                            }
                            reader.readAsDataURL($(this)[0].files[0]);
                        } else {
                            alert("This browser does not support FileReader.");
                        }
                    }
                }
            })
        })
        $('#ExpirationDate').datepicker({
            format: "yyyy/mm/dd",
            startDate: new Date()
        });
    });
</script>


