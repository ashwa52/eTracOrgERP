@model dynamic
@{
    long UserType = 0; bool GloblaAdminUser, ITAdminUser, OnlyAdminUser, ManagerUser, EmployeeUser, ClientUser;
    GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    if (ObjLogin != null)
    {
        UserType = ObjLogin.UserRoleId;

        #region Get Active User Type Flag
        /*Get Active User Type Flag*/

        switch ((WorkOrderEMS.Helper.UserType)ObjLogin.UserRoleId)
        {
            case WorkOrderEMS.Helper.UserType.GlobalAdmin:
                GloblaAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.ITAdministrator:
                ITAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Administrator:
                OnlyAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Manager:
                ManagerUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Employee:
                EmployeeUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Client:
                ClientUser = true;
                break;
            default:
                GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
                break;
        }

        /*Get Active User Type Flag*/
        #endregion Get Active User Type Flag
    }
    else
    {
        WorkOrderEMS.Helper.AlertMessageClass ObjAlertMessageClass = new WorkOrderEMS.Helper.AlertMessageClass();
        ViewBag.AlertMessageClass = ObjAlertMessageClass.Danger; ViewBag.Message = WorkOrderEMS.Helper.CommonMessage.SessionExpired();
        //throw new Exception(WorkOrderEMS.Helper.CommonMessage.SessionExpired());
        //Server.Transfer("Error");
        Response.Redirect("~/Views/Shared/_GlobalAdminLayout.cshtml");
    }

    string myModelprefix = ViewBag.myModelprefixName;
    string UserTypeControlName = myModelprefix + "UserType";
    string confirmpaswdid = string.Empty;
    //string ProfileImageLabelCaption = "Profile Image";
    if (myModelprefix != null && myModelprefix != "")
    {
        confirmpaswdid = myModelprefix.Remove(myModelprefix.Length - 1) + "_ConfirmPasswordSpan";
    }
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    string Controller = string.Empty, ActionName = string.Empty;
    string IsClientEmailVisible = string.Empty;

    if (routeValues != null)
    {
        if (routeValues.ContainsKey("controller"))
        {
            Controller = ViewContext.RouteData.GetRequiredString("controller");
            //Controller = routeValues["controller"].ToString();
        }
        if (routeValues.ContainsKey("action"))
        {
            ActionName = ViewContext.RouteData.GetRequiredString("action");
            IsClientEmailVisible = ActionName.ToLower();
            //ActionName = routeValues["action"].ToString();
        }
    }
    ////if (ViewBag.UpdateMode == true || ActionName.ToLower() == "getmanagerdetails")
    ////{
    ////    if (Model != null)
    ////    {
    ////        if (ViewBag.ActionSection == "manager")
    ////        {
    ////            StateID = Convert.ToString(Model.ManagerModel.Address.StateId);
    ////        }
    ////        else if (ViewBag.ActionSection == "client")
    ////        {
    ////            StateID = Convert.ToString(Model.ClientModel.Address.StateId);
    ////        }
    ////        else if (ViewBag.ActionSection == "User" && Model.UserModel != null)
    ////        {
    ////            StateID = Convert.ToString(Model.Address.StateId);
    ////        }
    ////        else if (ActionName.ToLower() == "locationsetup" || ActionName.ToLower() == "editlocationsetup" || ActionName.ToLower() == "getmanagerdetails")
    ////        {
    ////            StateID = Convert.ToString(Model.StateId);
    ////        }
    ////    }
    ////}
    if (ViewBag.UpdateMode != null && ViewBag.UpdateMode == true)
    {
        //ViewBag.Title = "Update Item";

    }


    //Code written By gayatri
    //on 24-Nov-2014
    //For Binding Dropdown on the basis of the user type
    string idState = string.Empty;
    string idCountry = string.Empty;
    string functionName = string.Empty;
    string stateName = string.Empty;
    string ddlAdminSelectName = string.Empty;
    stateName = myModelprefix + "Address.StateId";

    ddlAdminSelectName = myModelprefix + "Administrator";
    if (ViewBag.ActionSection == "manager")
    {
        idState = "BillingStates";
        idCountry = "BillingCountry";
        functionName = "BindState(true)";
    }
    else if ((ViewBag.ActionSection == "user") || (ViewBag.ActionSection == "employee"))
    {
        idState = "EmployeeStates";
        idCountry = "EmployeeCountry";
        functionName = "BindState('user')";
    }
    else
    {
        idState = "CompanyStates";
        idCountry = "CompanyCountry";
        functionName = "BindState(false)";
    }
    long hiddnUserType = 0;
    //if (!string.IsNullOrEmpty(ViewBag.ActionSection) && ViewBag.ActionSection == "manager")
    //{ hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Manager); }
    //else if (!string.IsNullOrEmpty(ViewBag.ActionSection) && ViewBag.ActionSection == "itadmin")
    //{ hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.ITAdministrator); }
    //else if (!string.IsNullOrEmpty(ViewBag.ActionSection) && ViewBag.ActionSection == "admin")
    //{ hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Administrator); }
    //else if (!string.IsNullOrEmpty(ViewBag.ActionSection) && ViewBag.ActionSection == "client")
    //{ hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Client); }
    if (!string.IsNullOrEmpty(ViewBag.ActionSection) && (ViewBag.ActionSection == "employee" || ViewBag.ActionSection == "user"))
    { hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Employee); }

}
<style>
    .roundedtext {
        border-radius: 12px
    }

    ::-webkit-input-placeholder {
        font-style: italic;
    }

    :-moz-placeholder {
        font-style: italic;
    }

    ::-moz-placeholder {
        font-style: italic;
    }

    :-ms-input-placeholder {
        font-style: italic;
    }
</style>
@Html.ValidationSummary(true)
<input type="hidden" value='@hiddnUserType' name='@UserTypeControlName'>
<input type="hidden" name="UserModel.EmployeeCategory" id="UserCategory" value='@Controller' />
@Html.Hidden("StateList", null, new { id = myModelprefix + "StateList", Value = ViewBag.StateList })
@Html.Hidden(myModelprefix + "UserId")
@Html.Hidden(myModelprefix + "AddressMasterId")
@Html.Hidden(myModelprefix + "Address.AddressMasterId")
@Html.Hidden(myModelprefix + "OperatingHolderSameId")
@Html.AntiForgeryToken()
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput-1.3.min.js")"></script>
<div class="col-lg-12 col-md-12  col-sm-12  col-xs-12" id="myContractDetails">
    <div class="panel-body">
        <div class="row">
            <div class="form-horizontal">
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Contract Holder", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @if (ViewBag.CompanyHolder != null)
                        {
                            <select name="@Html.Name(myModelprefix + "ContractHolder")"
                                    id="@Html.Id("ContractHolder")" class="form-control">
                                <option>--Select Contract Holder--</option>
                                @foreach (var Ch in ViewBag.CompanyHolder)
                                {
                                    <option value="@Ch.CompanyId" data-Type="@Ch.ContractTypeId"
                                            @*@if (Ch.UserId == Model.EmployeeName) { @: selected="selected"*@>
                                        @Ch.CompanyName
                                    </option>
                                }
                            </select>
                        }
                        @*@Html.DropDownList(myModelprefix + "ContractHolder", new SelectList(ViewBag.CompanyHolder, "CompanyId", "CompanyName"), "--Select Contract Holder--", new { @class= "form-control", @id= "ContractHolder" })}*@
                        else
                        {<select class="form-control required requiredselect nodisable" name="ContractDetailsModel.Contractholder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                        @Html.ValidationMessage(myModelprefix + "ContractHolder")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Operating Company", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @if (ViewBag.OperatingHolder != null)
                        {
                            <select name="@Html.Name(myModelprefix + "OperatingHolder")"
                                    id="@Html.Id("OperatingHolder")" class="form-control">
                                <option>--Select Operating Holder--</option>
                                @foreach (var Oh in ViewBag.OperatingHolder)
                                {
                                    <option value="@Oh.CompanyId" data-Type="@Oh.ContractTypeId"
                                            @*@if (Ch.UserId == Model.EmployeeName) { @: selected="selected"*@>
                                        @Oh.CompanyName
                                    </option>
                                }
                            </select>
                        }
                        else
                        {<select class="form-control required requiredselect nodisable" name="ContractDetailsModel.OperatingHolder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                        @Html.ValidationMessage(myModelprefix + "OperatingHolder")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Contract Start Date", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @Html.TextBox(myModelprefix + "ContractStartDate", null, new { @Placeholder = "Contract Start Time", @class = "form-control", @id = "ContractStartDate", @onkeydown = "return false;" })
                        @Html.ValidationMessage(myModelprefix + "ContractStartDate")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Contract End Date", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @Html.TextBox(myModelprefix + "ContractEndDate", null, new { @Placeholder = "Contract End Time", @class = "form-control", @id = "ContractEndDate" })
                        @Html.ValidationMessage(myModelprefix + "ContractEndDate")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Contract type", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @if (ViewBag.ContractType != null)
                        {
                            @Html.DropDownList(myModelprefix + "ContractType", new SelectList(ViewBag.ContractType, "ContractTypeId", "ContractType"), "--Select Contract Type--", new { @class = "form-control", @id = "ContractType" })}
                        else
                        {<select class="form-control required requiredselect nodisable" name="ContractDetailsModel.ContractType" id="ContractDetailsModel.ContractType"><option value="">--Select--</option></select>}
                        @Html.ValidationMessage(myModelprefix + "ContractType")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Client Invoicing Term", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @if (ViewBag.ClientInvoicingTerm != null)
                        {
                            @Html.DropDownList(myModelprefix + "ClientInvoicingTerm", new SelectList(ViewBag.ClientInvoicingTerm, "ClientInvoicingId", "ClientInvoicingName"), "--Select Client Invoicing Term--", new { @class = "form-control", @id = "ClientInvoicingTerm" })}
                        else
                        {<select class="form-control required requiredselect nodisable" name="ContractDetailsModel.ClientInvoicingTerm" id="ClientInvoicingTerm"><option value="">--Select Client Invoicing Term--</option></select>}
                        @Html.ValidationMessage(myModelprefix + "ClientInvoicingTerm")
                    </div>

                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Reporting Date", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @Html.TextBox(myModelprefix + "ReportingDate", null, new { @Placeholder = "Reporting Date", @class = "form-control", @Id = "ReportingDate", @onkeydown = "return false;" })
                        @Html.ValidationMessage(myModelprefix + "ReportingDate")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Monthly Intercompany Managment Fee", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @Html.TextBox(myModelprefix + "IntercompanyMgmFee", null, new { @Placeholder = "Intercompany Managment Fee", @class = "form-control" })
                        @Html.ValidationMessage(myModelprefix + "IntercompanyMgmFee")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Monthly Intercompany Invoicing", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @Html.TextBox(myModelprefix + "IntercompanyInvoicing", null, new { @Placeholder = "Inetercompany Invoicing", @class = "form-control", @id = "IntercompanyInvoicing", @onkeydown = "return false;" })
                        @Html.ValidationMessage(myModelprefix + "IntercompanyInvoicing")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Reporting type", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @if (ViewBag.AdministratorList != null)
                        {
                            <select name="ContractDetailsModel.ReportingType" id="ReportingType" class="form-control">
                                <option value="0">--Select--</option>
                                <option value="Weekly">Weekly</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly</option>
                            </select>
                        }
                        else
                        {<select class="form-control required requiredselect nodisable" name="ReportingType" id="ddlReportingType"><option value="">--Select--</option></select>}
                        @Html.ValidationMessage(myModelprefix + "ContractType")
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    <div class="col-sm-4 control-label"></div>
                    <div class="col-sm-8">
                    </div>
                </div>
                <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                    @Html.Label("Additional Years", new { @class = "col-sm-4 control-label star" })
                    <div class="col-sm-8">
                        @Html.RadioButton(myModelprefix + "AdditonalYears", true, new { @class = "AddYears" })&nbsp;Yes &nbsp;
                        @Html.RadioButton(myModelprefix + "AdditonalYears", false, new { @class = "AddYears" })&nbsp;No
                        @Html.ValidationMessage(myModelprefix + "AdditonalYears")
                        @*@Html.RadioButton(myModelprefix + "AdditonalYears", true)  &nbsp;Yes &nbsp; @Html.RadioButton(myModelprefix + "AdditonalYears", "0") &nbsp;No*@
                    </div>
                </div>
                <div id="YearsDiv" style="display:none">
                    <div class="form-group col-lg-6 col-md-6 col-sm-12  col-xs-12">
                        @Html.Label("Years", new { @class = "col-sm-4 control-label star" })
                        <div class="col-sm-8">
                            @Html.TextBox(myModelprefix + "Years", null, new { @Placeholder = "Years", @class = "form-control Years", @id = "Years", @onkeydown = "return false;" })
                            @Html.ValidationMessage(myModelprefix + "Years")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Modal-->
<div class="modal fade preview" id="myModalForContract" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="width:40%">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">X</span></button>
                <h4 class="modal-title" id="myModalLabel">Contract</h4>
            </div>
            <div class="modal-body">
                <div id="divDetailPreview" class="">
                    <div class="row">
                        <div class="" id="DivContractDetailsIndex">
                            <center><span><b>Is Contract Holder company and Operating Company same.</b></span></center>
                        </div>
                    </div>
                </div>
            </div>
            <br /><br />
            <div class="panel-footer">
                <div class="text-right">
                    @*<button type="button" class="btn btn-default bluebutton text-right" onclick="return PrintDivForVehicleDetails('DivVehicleDetailsIndex');" data-dismiss="modal">Print Details</button>*@
                    <button data-dismiss="modal" class="btn btn-primary" id="YesForSameCompany">Yes</button>
                    <button data-dismiss="modal" class="btn btn-default" id="btnCancelForSameCompany">No</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!--End Modal-->
<script>
    $(document).ready(function () {
        var contractVal;
        $("#ContractHolder").change(function () {
            contractVal = $("#ContractHolder option:selected").val();
            var ContractType = $("#ContractHolder option:selected").attr('data-Type');
            if (ContractType == 2) {
                $("#myModalForContract").modal('show');
            }
            else {
                $('#OperatingHolder').removeAttr('disabled');
            }
        })
        $('#ContractEndDate, #IntercompanyInvoicing, #ReportingDate').datepicker({
            format: "mm/dd/yyyy",
            startDate: new Date()
        });
        $('#ContractStartDate').datepicker({
            format: "mm/dd/yyyy",
        });
        $('#Years').datepicker({
            minViewMode: 2,
            startDate: new Date(),
            format: 'yyyy'
        });
        $('#YesForSameCompany').live("click", function () {
            $('#OperatingHolder').val(contractVal).trigger('change');
            $('#OperatingHolder').attr('disabled', 'disabled');
            $('#ContractDetailsModel_OperatingHolderSameId').val(contractVal);
        })
        $('#btnCancelForSameCompany').live("click", function () {
            $('#OperatingHolder').removeAttr('disabled');
        })
        $(".AddYears").change(function () {
            debugger
            if ($(this).val() == "True") {
                $("#YearsDiv").show();
            }
            else {
                $("#YearsDiv").hide();
            }
        });
    });
</script>
<script type="text/javascript">

    if ('@ViewBag.UpdateMode' == 'True')
    {
            debugger
            if ('@ViewBag.AdditionalYears' == "True") {
                $("#YearsDiv").show();
            }
            else {
                $("#YearsDiv").hide();
            }
          var $_ContractHolderId = @ViewBag.ContractHolderId;
          var $_OperatingHolderId = @ViewBag.OperatingHolderId;
          var $_ReportingTypeId = "@ViewBag.ReportingTypeId";
           if($_ContractHolderId != null && $_ContractHolderId != "")
           {
             $("#ContractHolder").val($_ContractHolderId);
           }
           if($_OperatingHolderId != null && $_OperatingHolderId != "")
           {
             $("#OperatingHolder").val($_OperatingHolderId);
           }
           if($_ReportingTypeId != null && $_ReportingTypeId != "")
           {
             $("#ReportingType").val($_ContractHolderId);
           }
        }
</script>