@model WorkOrderEMS.Models.VendorSetupManagementModel
@*@model dynamic*@
@{
    long UserType = 0; bool GloblaAdminUser, ITAdminUser, OnlyAdminUser, ManagerUser, EmployeeUser, ClientUser;
    GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    if (ObjLogin != null)
    {
        UserType = ObjLogin.UserRoleId;

        #region Get Active User Type Flag
        /*Get Active User Type Flag*/

        switch ((WorkOrderEMS.Helper.UserType)ObjLogin.UserRoleId)
        {
            case WorkOrderEMS.Helper.UserType.GlobalAdmin:
                GloblaAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.ITAdministrator:
                ITAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Administrator:
                OnlyAdminUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Manager:
                ManagerUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Employee:
                EmployeeUser = true;
                break;
            case WorkOrderEMS.Helper.UserType.Client:
                ClientUser = true;
                break;
            default:
                GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
                break;
        }

        /*Get Active User Type Flag*/
        #endregion Get Active User Type Flag
    }
    else
    {
        WorkOrderEMS.Helper.AlertMessageClass ObjAlertMessageClass = new WorkOrderEMS.Helper.AlertMessageClass();
        ViewBag.AlertMessageClass = ObjAlertMessageClass.Danger; ViewBag.Message = WorkOrderEMS.Helper.CommonMessage.SessionExpired();
        //throw new Exception(WorkOrderEMS.Helper.CommonMessage.SessionExpired());
        //Server.Transfer("Error");
        Response.Redirect("~/Views/Shared/_GlobalAdminLayout.cshtml");
    }

    string myModelprefix = ViewBag.myModelprefixName;
    string UserTypeControlName = myModelprefix + "UserType";
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    string Controller = string.Empty, ActionName = string.Empty;
    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    string VendorInsuranceDocPath = System.Configuration.ConfigurationManager.AppSettings["CompanyDocuments"];

    if (routeValues != null)
    {
        if (routeValues.ContainsKey("controller"))
        {
            Controller = ViewContext.RouteData.GetRequiredString("controller");
            //Controller = routeValues["controller"].ToString();
        }
        if (routeValues.ContainsKey("action"))
        {
            ActionName = ViewContext.RouteData.GetRequiredString("action");
        }
    }
    if (ViewBag.UpdateMode != null && ViewBag.UpdateMode == true)
    {
        //ViewBag.Title = "Update Item";

    }


    //Code written By gayatri
    //on 24-Nov-2014
    //For Binding Dropdown on the basis of the user type
    string idState = string.Empty;
    string idCountry = string.Empty;
    string functionName = string.Empty;
    string stateName = string.Empty;
    string ddlAdminSelectName = string.Empty;
    stateName = myModelprefix + "Address.StateId";

    ddlAdminSelectName = myModelprefix + "Administrator";
    if (ViewBag.ActionSection == "manager")
    {
        idState = "BillingStates";
        idCountry = "BillingCountry";
        functionName = "BindState(true)";
    }
    else if ((ViewBag.ActionSection == "user") || (ViewBag.ActionSection == "employee"))
    {
        idState = "EmployeeStates";
        idCountry = "EmployeeCountry";
        functionName = "BindState('user')";
    }
    else
    {
        idState = "CompanyStates";
        idCountry = "CompanyCountry";
        functionName = "BindState(false)";
    }
    long hiddnUserType = 0;
    if (!string.IsNullOrEmpty(ViewBag.ActionSection) && (ViewBag.ActionSection == "employee" || ViewBag.ActionSection == "user"))
    { hiddnUserType = Convert.ToInt64(WorkOrderEMS.Helper.UserType.Employee); }

}
<style>
    .roundedtext {
        border-radius: 12px
    }

    ::-webkit-input-placeholder {
        font-style: italic;
    }

    :-moz-placeholder {
        font-style: italic;
    }

    ::-moz-placeholder {
        font-style: italic;
    }

    :-ms-input-placeholder {
        font-style: italic;
    }

    .top-row > div {
        float: left;
        width: 48%;
        margin-right: 4%;
    }

    input[type="radio"] {
        height: 20px;
        width: 20px;
        background-color: #4475b5;
        color: #4475b5;
        float: left;
    }
</style>
@Html.ValidationSummary(true)
@Html.AntiForgeryToken()
@*<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>*@
<script src="@Url.Content("~/Scripts/bootstrap-datepicker.js")"></script>
<input type="hidden" value='@hiddnUserType' name='@UserTypeControlName'>
<input type="hidden" name="UserModel.EmployeeCategory" id="UserCategory" value='@Controller' />
@Html.Hidden("StateList", null, new { id = myModelprefix + "StateList", Value = ViewBag.StateList })
@Html.Hidden(myModelprefix + "UserId")
@Html.Hidden(myModelprefix + "AddressMasterId")
@Html.Hidden(myModelprefix + "Address.AddressMasterId")
@Html.Hidden(myModelprefix + "OperatingHolderSameId")

<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput-1.3.min.js")"></script>

<div class="panel panel-primary setup-content" id="myContractDetails">
    <div class="basic-form">
        <div class="form-group row">
            <label class="col-sm-6 col-form-label" for="LocationName" style="font-size:16px;">1) Is Company has certificate to Add?<span class="req">*</span></label>

        </div>
        <div class="form-group row">

            <div class="col-sm-4">
                <span>
                    @Html.RadioButton(myModelprefix + "IsCompanyCertificate", "YesCertificate", true)<span class="radio_span">&nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    @Html.RadioButton(myModelprefix + "IsCompanyCertificate", "NoCertificate", false, new { @style = "margin-left:20%;" })<span class="radio_span">
                        &nbsp;No
                    </span>
                    @Html.ValidationMessage(myModelprefix + "IsCompanyCertificate")
                </span>

            </div>

        </div>
        <div class="form-group row HideRowIfNo">
            <label class="col-sm-2 col-form-label" for="LicenseName"> License Name<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorInsuranceModel.LicenseName, null, new { @id = "LicenseName", @required = "required", @pattern = @"^([a-zA-Z .&'-]+)$", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.LicenseName)
            </div>
            <label class="col-sm-2 col-form-label" for="LicenseName">  License Number <span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorInsuranceModel.LicenseNumber, null, new { @id = "LicenseNumber", @required = "required", @pattern = @"^([a-zA-Z0-9]+)$", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.LicenseNumber)
            </div>
        </div>
        <div class="form-group row HideRowIfNo">
            <label class="col-sm-2 col-form-label" for="LicenseName"> Expiration Date<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorInsuranceModel.LicenseExpirationDate, null, new { @id = "LicenseExpirationDate", @onkeydown = "return false;", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.LicenseExpirationDate)
            </div>
            <label class="col-sm-2 col-form-label" for="LicenseName">    License Document</label>
            <div class="col-sm-4">
                <div id="dvLicensePreview">
                </div>
                <input id="fileuploadLicense" type="file" style="margin-left:50%;" name="VendorInsuranceModel.LicenseDocumentFile" />
                <ul class="attachment">
                    @if (Model.VendorInsuranceModel != null)
                    {
                        <li style="margin-left :25%;margin-top:20px;">
                            <a class="title" href="@Url.Content(VendorInsuranceDocPath + myModelprefix + "LicenseDocument")">@myModelprefix + "LicenseDocument"</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-6 col-form-label" for="LocationName" style="font-size:16px;">2) Is Insurance required?<span class="req">*</span></label>
        </div>
        <div class="form-group row">

            <div class="col-sm-4">
                @Html.RadioButtonFor(model => model.VendorInsuranceModel.IsInsuranceRequired, "YesInsurance")<span class="radio_span">&nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                @Html.RadioButtonFor(model => model.VendorInsuranceModel.IsInsuranceRequired, "NoInsurance", new { @style = "margin-left:20%;" })<span class="radio_span">
                    &nbsp;No
                </span>
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.IsInsuranceRequired)
            </div>

        </div>
        <div class="form-group row HideRowInsurance" style="display:none;">
            <label class="col-sm-2 col-form-label" for="LicenseName">Insurance Carries<span class="req">*</span></label>
            <div class="col-sm-4">

                @Html.TextBoxFor(model => model.VendorInsuranceModel.InsuranceCarries, null, new { @id = "InsuranceCarries", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.InsuranceCarries)
            </div>
            <label class="col-sm-2 col-form-label" for="LicenseName">   Policy Number</label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorInsuranceModel.PolicyNumber, null, new { @id = "PolicyNumber", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.PolicyNumber)
            </div>
        </div>
        <div class="form-group row HideRowInsurance" style="display:none;">
            <label class="col-sm-2 col-form-label" for="LicenseName">Expiration Date<span class="req">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.VendorInsuranceModel.InsuranceExpirationDate, null, new { @id = "InsuranceExpirationDate", @onkeydown = "return false;", @class = "form-control input-rounded" })
                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.InsuranceExpirationDate)
            </div>
            <label class="col-sm-2 col-form-label" for="LicenseName"> Insurance Document</label>
            <div class="col-sm-4">
                <div id="dvInsurancePreview">
                </div>
                <input id="fileuploadInsurance" type="file" style="margin-left:50%;" name="VendorInsuranceModel.InsuranceDocumentFile" />
                <ul class="attachment">
                    @if (Model.VendorInsuranceModel != null)
                    {
                        <li style="margin-left :25%;margin-top:20px;">
                            <a class="title" href="@Url.Content(VendorInsuranceDocPath + "InsuranceDocument")">@Model.VendorInsuranceModel.InsuranceDocument + "InsuranceDocument"</a>
                        </li>
                    }
                </ul>
            </div>
        </div>



    </div>
</div>




<script>
    $(document).ready(function () {
        var contractVal;
        $("#ContractHolder").change(function () {
            contractVal = $("#ContractHolder option:selected").val();
            $("#myModalForContract").modal('show');
        })
        $("input[type='radio']").change(function () {
            if ($(this).val() == "YesCertificate") {
                $(".HideRowIfNo").show();
            }
            else if ($(this).val() == "NoCertificate") {
                $(".HideRowIfNo").hide();
            }
            if ($(this).val() == "YesInsurance") {
                $(".HideRowInsurance").show();
            }
            else if ($(this).val() == "NoInsurance") {
                $(".HideRowInsurance").hide();
            }
            else if ($(this).val() == "Vendor") {
                $(".ContractExecutedByHideShow").show();
                $('.ContractExecutedClass').prop('checked', true);
            }
            else if ($(this).val() == "Own") {
                $(".ContractExecutedByHideShow").hide();
                $('.ContractExecutedClass').prop('checked', false);

            }
            else if ($(this).val() == 1) {
                $('#myModalForContract').modal('show');
            }
            else if ($(this).val() == 2) {
                $('#myModalForContract').modal('hide');
            }
            //var ReccoringVal = $("#ReccurenceForPO option:selected").val();
            else if ($(this).val() == "Y") {
                $(".AllocationNeededClass").show();
            }
            else if ($(this).val() == "N") {
                $(".AllocationNeededClass").hide();
            }
        });
        $('#LicenseExpirationDate,#InsuranceExpirationDate').datepicker({
            format: "mm/dd/yyyy",
            startDate: new Date()
        });

        $(function () {
            $("#fileuploadLicense").change(function () {
                $("#dvLicensePreview").html("");
                var allowedExtensions = /(\.pdf|\.doc|\.docx|\.txt)$/i;

                var size = this.files[0].size;
                if (!allowedExtensions.exec($(this).val().toLowerCase())) {
                    //var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.pdf|.doc|.txt)$/;
                    //if (!regex.test($(this).val().toLowerCase())) {
                    $(this).val('');
                    alert("Invalid file type");
                    return false;
                } else if (size >= 4194304) {
                    alert("Max file size 4 mb.");
                    $(this).val("");
                    return false;
                }
            })
            $("#fileuploadInsurance").change(function () {
                $("#dvInsurancePreview").html("");
                var allowedExtensions = /(\.pdf|\.doc|\.docx|\.txt)$/i;
                var size = this.files[0].size;
                if (!allowedExtensions.exec($(this).val().toLowerCase())) {
                    $(this).val('');
                    alert("Invalid file type");
                    return false;
                }
                else if (size >= 4194304) {
                    alert("Max file size 4 mb.");
                    $(this).val("");
                    return false;
                }
            })
        });

    });
</script>

