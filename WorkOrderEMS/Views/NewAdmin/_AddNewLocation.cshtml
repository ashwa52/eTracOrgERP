@model WorkOrderEMS.Models.LocationMasterModel
@{
    ViewBag.Title = "Add New Location";
    //Layout = "~/Views/Shared/_NewAdminLayout.cshtml";
    Layout = null;
    string eTracScriptVersion = System.Configuration.ConfigurationManager.AppSettings["eTracScriptVersion"];
    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    string loginUserName = "", loginUserEmail = "", loginUserContactNo = "", loginUserProfile = "";
    long loginUserType = 0;
    long locationId = 0;
    string ServiceId = string.Empty;
    if (ObjLogin != null)
    {
        loginUserName = ObjLogin.FName + "'s";
        loginUserEmail = ObjLogin.Email;
        loginUserProfile = ObjLogin.UserProfile;
        loginUserType = ObjLogin.UserRoleId;
        //loginUserContactNo = ObjLogin.ContactNo;
        locationId = ObjLogin.LocationID;
    }
    if (ViewBag.UpdateMode == true)
    {
        ViewBag.Title = "Update Location"; ServiceId = ViewBag.ServicesID;
    }
}
<!--Multistep wizard CSS-->
<style>

    .error {
        color: red;
    }

    .stepwizard-step p {
        margin-top: 0px;
        color: #666;
        font-size: 20px;
        margin-left: -35px;
    }

    .stepwizard-row {
        display: table-row;
    }

    .stepwizard {
        display: table;
        width: 40%;
        position: relative;
        margin-left: 33%;
    }

    .stepwizard-step button[disabled] {
        /*opacity: 1 !important;
    filter: alpha(opacity=100) !important;*/
    }

    .stepwizard .btn.disabled, .stepwizard .btn[disabled], .stepwizard fieldset[disabled] .btn {
        opacity: 1 !important;
        color: #bbb;
    }

    .stepwizard-row:before {
        top: 14px;
        bottom: 0;
        position: absolute;
        content: " ";
        width: 58%;
        height: 1px;
        background-color: #ccc;
        z-index: 0;
    }

    .stepwizard-step {
        display: table-cell;
        /*text-align: center;*/
        position: relative;
    }

    .btn-circledata {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 6px 0;
        font-size: 12px;
        line-height: 1.428571429;
        border-radius: 15px;
    }
</style>
@Scripts.Render("~/bundles/modernizr")
<link href="~/Content/NewAdminContent/VENDOR/bootstrap-multiselect/css/bootstrap-multiselect.css" rel="stylesheet" />
@*<link href="~/Content/NewAdminContent/VENDOR/jquery-steps/css/jquery.steps.css" rel="stylesheet" />*@
<link href="@Url.Content("~/Content/datepicker.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/bootstrap-datetimepicker.min.css")" rel="stylesheet" />
<!-- daterange picker -->
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/daterangepicker/daterangepicker-bs3.css")" />
<!-- Bootstrap Color Picker -->
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/colorpicker/bootstrap-colorpicker.min.css")" />
<!-- Bootstrap time Picker -->
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/timepicker/bootstrap-timepicker.min.css")" />
<link href="@Url.Content("~/Content/NewAdminContent/CSS/RadioButtonCSS.css")" rel="stylesheet" />
<link href="~/Content/NewAdminContent/CSS/style.css" rel="stylesheet" />
<br />
@Html.AntiForgeryToken()
@Html.ValidationSummary(true)
<div class="content-body">
    <div class="container-fluid">
        <!-- row -->
        <div class="row">
            <div class="col-xl-12 col-xxl-12">
                <div class="card" data-aos="fade-up">
                    <div class="card-header headerSize" style="padding: 19px;">
                        <h4 class="card-title" style="color:white;"><strong>@ViewBag.Title</strong></h4>
                        @*<h4 class="card-title" style="color:white;"> <a href="javascript:void(0);" id="SendToLoationList"><i class="fa fa-arrow-left" style="font-size: 25px;color: white;"></i></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Location Portal</strong></h4>*@
                    </div>
                    <div class="card-body">
                        <div class="stepwizard">
                            <div class="stepwizard-row setup-panel">
                                <div class="stepwizard-step col-xs-3">
                                    <a href="#step-1" type="button" class="btn btn-success btn-circledata">1</a>
                                    <p><small>Location Setup</small></p>
                                </div>
                                <div class="stepwizard-step col-xs-3">
                                    <a href="#step-2" type="button" class="btn btn-default btn-circledata" disabled="disabled">2</a>
                                    <p><small>Contract Info</small></p>
                                </div>
                                <div class="stepwizard-step col-xs-3">
                                    <a href="#step-3" type="button" class="btn btn-default btn-circledata" disabled="disabled">3</a>
                                    <p><small>Location Rules</small></p>
                                </div>
                            </div>
                        </div>
                        <br />
                        <form action="@Url.Action("LocationSetup", "GlobalAdmin")" method="post" id="step-form-horizontal" class="step-form-horizontal" role="form" style="margin-left:80px;">
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.LocationId)
                            <div class="panel panel-primary setup-content" id="step-1">
                                <div class="basic-form" id="step-1">
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.LocationName, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.LocationName, new { @Placeholder = "Location Name", @class = "form-control input-rounded required isValidLocationName" })
                                            <span style="display:none;" data-valmsg-replace="true" class="field-validation-error"><span class="">Location Name already exists.</span></span>
                                        </div>
                                        @Html.LabelFor(model => model.Address1, new { @class = "col-sm-1 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.Address1, new { @Placeholder = "Location Address", @class = "form-control input-rounded required" })
                                            @Html.ValidationMessageFor(model => model.Address1)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.Address2, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.Address2, new { @Placeholder = "Location Code", @class = "form-control input-rounded required", @maxLength = "20" })
                                            @Html.ValidationMessageFor(model => model.Address2)
                                        </div>
                                        @Html.LabelFor(model => model.CountryId, new { @class = "col-sm-1 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.Country != null)
                                            {
                                                @Html.DropDownListFor(model => model.CountryId, new SelectList(ViewBag.Country, "CountryID", "CountryName"), WorkOrderEMS.Helper.Constants.ConfigCountryValue, new { @class = "form-control input-rounded required requiredselect", @id = "Country", @onchange = "BindState()" })
                                            }
                                            else
                                            {
                                                <select id="Country" class="form-control input-rounded requiredselect"><option value="-1">--Select--</option></select>
                                            }
                                            @Html.ValidationMessageFor(model => model.CountryId)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.StateId, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.StateList != null)
                                            {
                                                @Html.DropDownListFor(model => model.StateId, new SelectList(ViewBag.StateList, "StateId", "StateName"), "--Select State--", new { @class = "form-control input-rounded required requiredselect", @id = "State" })
                                            }
                                            else
                                            {
                                                <select id="States" name="StateId" class="form-control input-rounded required requiredselect locationstate"><option value="0">Select</option></select>
                                            }
                                            @Html.ValidationMessageFor(model => model.StateId)
                                        </div>
                                        @Html.LabelFor(model => model.ZipCode, new { @class = "col-sm-1 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.ZipCode, new { @Placeholder = "Location Zip Code", @minLength = "5", @maxLength = "5", @pattern = "[0-9]", @class = "Postal form-control input-rounded required" })
                                            @Html.ValidationMessageFor(model => model.ZipCode)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.City, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.City, new { @Placeholder = " City", @maxLength = "100", @class = "form-control input-rounded required LetterOnlyFr" })
                                            @Html.ValidationMessageFor(model => model.City)
                                        </div>
                                        @Html.LabelFor(model => model.PhoneNo, new { @class = "col-sm-1 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.PhoneNo, new { @Placeholder = "Phone no", @pattern = "[0-9]", @minLength = "10", @maxLength = "10", @class = "Phone  form-control input-rounded required" })
                                            @Html.ValidationMessageFor(model => model.PhoneNo)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.LocationType, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.LocationTypeList != null)
                                            {
                                                @Html.DropDownListFor(model => model.LocationType, new SelectList(ViewBag.LocationTypeList, "Value", "Text"), "--Select--", new { @class = "form-control input-rounded required requiredselect", @id = "LocationType" })
                                            }
                                            else
                                            {
                                                <select id="Country" class="form-control input-rounded requiredselect"><option value="-1">--Select--</option></select>
                                            }
                                            @Html.ValidationMessageFor(model => model.LocationType)
                                        </div>
                                        @Html.Label("Location Services", new { @class = "col-sm-1 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.DropDownList("Services", new SelectList(ViewBag.Services, "ServiceID", "ServiceName", "Description"), new { @id = "ddlServices", @multiple = "multiple", @class = "form-control input-rounded basic-multiselect required requiredselect" })
                                            <span style="display: none; color:red;" class="">Select at least one service for this location.</span>
                                            @Html.Hidden("ServicesID")
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.Description, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextAreaFor(model => model.Description, new { @Placeholder = "Location Description", @class = "form-control input-roundedresize", @style = "border-radius: 20px;", @rows = "4", @id = "comment" })
                                            @Html.ValidationMessageFor(model => model.Description)
                                        </div>
                                        @Html.Label("Location Sub Type", new { @class = "col-sm-1 col-form-label test", @style = "display:none;" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.LocationSubType != null)
                                            {
                                                @Html.DropDownListFor(model => model.LocationSubType, new SelectList(ViewBag.LocationSubType, "GlobalCodeId", "CodeName"), "--Sub Location Type--", new { @class = "form-control input-rounded requiredselect test", @style = "display:none;", @id = "LocationSubType" })
                                                @Html.ValidationMessageFor(model => model.LocationSubType)
                                            }
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.LabelFor(model => model.PaymenttermsId, new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.PaymentTerms != null)
                                            {
                                                @Html.DropDownListFor(model => model.PaymenttermsId, new SelectList(ViewBag.PaymentTerms, "PaymentTermId", "PaymentTermName"), new { @class = "form-control input-rounded required requiredselect", @id = "Payment Terms" })
                                            }
                                            else
                                            {
                                                <select id="PaymenttermsId" class="form-control input-rounded requiredselect"><option value="-1">--Select--</option></select>
                                            }
                                            @Html.ValidationMessageFor(model => model.PaymenttermsId)
                                        </div>
                                    </div>
                                </div>
                                @*<i class="fa fa-long-arrow-right nextBtndata pull-right" style="font-size: 33px;color:#0aa0cd;cursor: pointer;"></i>*@
                                <button type="button" class="btn btn-success pull-right nextBtndata" style="margin-left: 10px;"><i class="fa fa-arrow-right"></i></button>
                                <button type="button" class="btn btn-success pull-right SendToLoationList" @*id="SendToLoationList"*@><i class="fa fa-arrow-left"></i>&nbsp;Back to List</button>
                            </div>
                            <div class="panel panel-primary setup-content" id="step-2">
                                <div class="basic-form" id="step-2">
                                    <div class="form-group row">
                                        @Html.Label("Contract Holder", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.CompanyHolder != null)
                                            {
                                                <select name="@Html.Name("ContractDetailsModel.ContractHolder")"
                                                        id="@Html.Id("ContractHolder")" class="form-control input-rounded requiredselect">
                                                    <option>--Select Contract Holder--</option>
                                                    @foreach (var Ch in ViewBag.CompanyHolder)
                                                    {
                                                        <option value="@Ch.CompanyId" data-Type="@Ch.ContractTypeId"
                                                                @*@if (Ch.UserId == Model.EmployeeName) { @: selected="selected"*@>
                                                            @Ch.CompanyName
                                                        </option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {<select class="form-control input-rounded requiredselect nodisable" name="ContractDetailsModel.Contractholder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractHolder)
                                        </div>
                                        @Html.Label("Operating Company", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.OperatingHolder != null)
                                            {
                                                <select name="@Html.Name("ContractDetailsModel.OperatingHolder")"
                                                        id="@Html.Id("OperatingHolder")" class="form-control input-rounded requiredselect">
                                                    <option>--Select Operating Holder--</option>
                                                    @foreach (var Oh in ViewBag.OperatingHolder)
                                                    {
                                                        <option value="@Oh.CompanyId" data-Type="@Oh.ContractTypeId"
                                                                @*@if (Ch.UserId == Model.EmployeeName) { @: selected="selected"*@>
                                                            @Oh.CompanyName
                                                        </option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {<select class="form-control input-rounded requiredselect required requiredselect nodisable" name="ContractDetailsModel.OperatingHolder" id="ddlContractHolder"><option value="">--Select--</option></select>}
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.OperatingHolder)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Contract Start Date", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBox("ContractDetailsModel.ContractStartDate", Convert.ToDateTime(Model.ContractDetailsModel.ContractStartDate).ToString("MM/dd/yyyy"), new { @Placeholder = "Contract Start Time", @id = "ContractStartDate", @class = "form-control input-rounded" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractStartDate)
                                        </div>
                                        @Html.Label("Contract End Date", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4 datetimepicker">
                                            @Html.TextBox("ContractDetailsModel.ContractEndDate", Convert.ToDateTime(Model.ContractDetailsModel.ContractEndDate).ToString("MM/dd/yyyy"), new { @Placeholder = "Contract End Time", @class = "form-control input-rounded", @id = "ContractEndDate", @onkeydown = "return false;" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractEndDate)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Contract type", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.ContractType != null)
                                            {
                                                @Html.DropDownListFor(model => model.ContractDetailsModel.ContractType, new SelectList(ViewBag.ContractType, "ContractTypeId", "ContractType"), "--Select Contract Type--", new { @class = "form-control input-rounded", @id = "ContractType" })}
                                            else
                                            { <select class="form-control input-rounded required requiredselect nodisable" name="ContractDetailsModel.ContractType" id="ContractDetailsModel.ContractType"><option value="">--Select--</option></select>}
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ContractType)
                                        </div>
                                        @Html.Label("Client Invoicing Term", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.ClientInvoicingTerm != null)
                                            {
                                                @Html.DropDownListFor(model => model.ContractDetailsModel.ClientInvoicingTerm, new SelectList(ViewBag.ClientInvoicingTerm, "ClientInvoicingId", "ClientInvoicingName"), "--Select Client Invoicing Term--", new { @class = "form-control input-rounded", @id = "ClientInvoicingTerm" })}
                                            else
                                            {<select class="form-control input-rounded required requiredselect nodisable" name="ContractDetailsModel.ClientInvoicingTerm" id="ClientInvoicingTerm"><option value="">--Select Client Invoicing Term--</option></select>}
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ClientInvoicingTerm)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Reporting Type", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @if (ViewBag.AdministratorList != null)
                                            {
                                                <select name="ContractDetailsModel.ReportingType" id="ReportingType" class="form-control input-rounded">
                                                    <option value="0">--Select--</option>
                                                    <option value="Weekly">Weekly</option>
                                                    <option value="Monthly">Monthly</option>
                                                    <option value="Quarterly">Quarterly</option>
                                                </select>
                                            }
                                            else
                                            {<select class="form-control input-rounded required requiredselect nodisable" name="ReportingType" id="ddlReportingType"><option value="">--Select--</option></select>}
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ReportingType)
                                        </div>
                                        @Html.Label("Reporting Date", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBox("ContractDetailsModel.ReportingDate", Convert.ToDateTime(Model.ContractDetailsModel.ReportingDate).ToString("MM/dd/yyyy"), new { @Placeholder = "Reporting Date", @id = "ReportingDate", @class = "form-control input-rounded" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ReportingDate)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Monthly Intercompany Managment Fee", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.ContractDetailsModel.InterCompanyMgmFee, null, new { @Placeholder = "Intercompany Managment Fee", @class = "form-control input-rounded" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.InterCompanyMgmFee)
                                        </div>
                                        @Html.Label("Monthly Intercompany Invoicing", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBox("ContractDetailsModel.InterCompanyInvoicing", Convert.ToDateTime(Model.ContractDetailsModel.InterCompanyInvoicing).ToString("MM/dd/yyyy"), new { @Placeholder = "Inetercompany Invoicing", @id = "IntercompanyInvoicing", @class = "form-control input-rounded" })
                                            @*@Html.TextBoxFor(model => model.ContractDetailsModel.InterCompanyInvoicing, null, new { @Placeholder = "Inetercompany Invoicing", @id = "IntercompanyInvoicing", @class = "form-control input-rounded" })*@
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.InterCompanyInvoicing)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Additional Years", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-2">
                                            @*<input id="radio1" type="radio" name="radio"><label for="radio1" class="radio">Radio 1</label>
                                                <input id="radio2" type="radio" name="radio"><label for="radio2" class="radio">Radio 2</label>
                                                <input id="radio3" type="radio" name="radio"><label for="radio3" class="radio">Radio 3</label>*@
                                            @Html.RadioButtonFor(model => model.ContractDetailsModel.AdditionalYears, true, new { @class = "AddYears", @id = "radio1" })<label for="radio1" class="radio">Yes</label>&nbsp; &nbsp;
                                        </div>
                                        <div class="col-sm-2">
                                            @Html.RadioButtonFor(model => model.ContractDetailsModel.AdditionalYears, false, new { @class = "AddYears", @id = "radio2" })<label for="radio2" class="radio">No</label>
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.AdditionalYears)
                                        </div>
                                        @Html.Label("Years", new { @class = "col-sm-2 col-form-label YearsDiv", @style = "display:none;" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.ContractDetailsModel.Years, null, new { @Placeholder = "Years", @class = "form-control input-rounded YearsDiv", @id = "Years", @style = "display:none;" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.Years)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Client Invoicing Date", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @*@Html.TextBoxFor(model => model.ContractDetailsModel.ClientInvoicingDate, null, new { @Placeholder = "Client Invoicing Date", @id = "ClientInvoicingDate", @class = "form-control input-rounded" })*@
                                            @Html.TextBox("ContractDetailsModel.ClientInvoicingDate", Model.ContractDetailsModel.ClientInvoicingDate.ToString("MM/dd/yyyy"), new { @Placeholder = "Client Invoicing Date", @id = "ClientInvoicingDate", @class = "form-control input-rounded" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.ClientInvoicingDate)
                                        </div>
                                        @Html.Label("Frequency Of Invoicing", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.ContractDetailsModel.FrequencyOfInvoicing, null, new { @Placeholder = "Frequency Of Invoicing", @id = "FrequencyOfInvoicing", @class = "form-control input-rounded", @type = "number" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.FrequencyOfInvoicing)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Automatic Billing Date", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @*@Html.TextBoxFor(model => model.ContractDetailsModel.Automaticbillingdate, null, new { @Placeholder = "Automatic Billing Date", @id = "AutomaticBillingDate", @class = "form-control input-rounded" })*@
                                            @Html.TextBox("ContractDetailsModel.Automaticbillingdate", Model.ContractDetailsModel.Automaticbillingdate.ToString("MM/dd/yyyy"), new { @Placeholder = "Automatic Billing Date", @id = "AutomaticBillingDate", @class = "form-control input-rounded" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.Automaticbillingdate)
                                        </div>
                                        @Html.Label("Cut Off Card Date", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @*@Html.TextBoxFor(model => model.ContractDetailsModel.Cutoffcarddate, null, new { @Placeholder = "Cut Off Card Date", @id = "CutOffCardDate", @class = "form-control input-rounded" })*@
                                            @Html.TextBox("ContractDetailsModel.Cutoffcarddate", Model.ContractDetailsModel.Cutoffcarddate.ToString("MM/dd/yyyy"), new { @Placeholder = "Cut Off Card Date", @id = "CutOffCardDate", @class = "form-control input-rounded" })
                                            @Html.ValidationMessageFor(model => model.ContractDetailsModel.Cutoffcarddate)
                                        </div>
                                    </div>
                                </div>
                                <a href="#step-3" class="btn btn-success pull-right nextBtndata" style="margin-left: 10px;">
                                    <i class="fa fa-arrow-right"></i>
                                </a>
                                @*<a href="#step-1" class="btn btn-success pull-right nextBtndata" style="margin-left: 10px;">
                                        <i class="fa fa-arrow-left"></i>
                                    </a>*@
                                <button type="button" class="btn btn-success pull-right SendToLoationList" @*id="SendToLoationList"*@><i class="fa fa-arrow-left"></i>&nbsp;Back to List</button>
                            </div>
                            <div class="panel panel-primary setup-content" id="step-3">
                                <div class="basic-form" id="step-3">
                                    <div class="form-group row">
                                        @Html.Label("Charge Deposite For Monthly Parker Card", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.LocationRuleMappingModel.ChargeDepositeMonthlyParkerCard, new { @Placeholder = "Charge Deposite For Monthly Parker Card", @class = "form-control input-rounded required " })
                                        </div>
                                        @Html.Label("Is Charge Deposite For Monthly Parker Card", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.CheckBoxFor(model => model.LocationRuleMappingModel.IsChargeDepositeMonthlyParkerCard)
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        @Html.Label("Avialiable Space", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.TextBoxFor(model => model.LocationRuleMappingModel.AviailableSpaces, new { @Placeholder = "Avialiable Space", @class = "form-control input-rounded required " })
                                        </div>
                                        @Html.Label("Are there any special rules for position billable hourly man", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4">
                                            @Html.CheckBoxFor(model => model.LocationRuleMappingModel.IsSpecialRulesHourlyMan)
                                        </div>
                                    </div>
                                </div>
                                <input type="submit" id="submitlocationData" class="btn btn-success pull-right" style="margin-left: 30px;" value="Submit" />
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="myModalForContract">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Contract</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="divDetailPreview" class="">
                    <div class="row">
                        <div class="" id="DivContractDetailsIndex">
                            <center><span><b>Is Contract Holder company and Operating Company same.</b></span></center>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button data-dismiss="modal" class="btn btn-default" id="btnCancelForSameCompany">No</button>
                <button data-dismiss="modal" class="btn btn-primary" id="YesForSameCompany">Yes</button>
            </div>
        </div>
    </div>
</div>
<!--**********************************
    Content body end
***********************************-->
@*<script src="~/Content/NewAdminContent/VENDOR/jquery-steps/build/jquery.steps.min.js"></script>*@
<!--Validation-->
@*<script src="~/Scripts/bootstrap.min.js"></script>*@
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>
<script src="~/Content/NewAdminContent/VENDOR/bootstrap-multiselect/js/bootstrap-multiselect.js"></script>
<script src="~/Scripts/NewAdminJS/plugins-init/bootstrap-multiselect-init.js"></script>
<script src="@Url.Content("~/Scripts/bootstrap-datepicker.js")"></script>
<!-- daterangepicker -->
<script src="@Url.Content("https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js")"></script>
<script src="@Url.Content("~/Content/Dashboard/plugins/daterangepicker/daterangepicker.js")"></script>
<!-- bootstrap color picker -->
<script src="@Url.Content("~/Content/Dashboard/plugins/colorpicker/bootstrap-colorpicker.min.js")"></script>
<!-- bootstrap time picker -->
<script src="@Url.Content("~/Content/Dashboard/plugins/timepicker/bootstrap-timepicker.min.js")"></script>
<script type="text/javascript" src="~/Scripts/BindDropDown/DropDownList.js"></script>
@section Scripts {
    <script type="text/javascript">
    $_GetLocationSubTypeByLocationTypeIdUrl = '@Url.Action("GetLocationSubType", "Dropdown")';
    $_LocationTypeID = '@Html.ValueFor(model => model.LocationSubType)';
        $_ServiceID = '@ServiceId';
    </script>
}
<script>
    $(document).ready(function () {
        //Edit location loca
        if('@ViewBag.UpdateMode' == 'True')
        {
            $('#ContractStartDate,#ReportingDate,#ClientInvoicingDate,#AutomaticBillingDate').datepicker({
                format: "mm/dd/yyyy",
            });
            
            //Add Services for edoting
            var $_ServiceID = '@ViewBag.ServicesID';
            var Arr = $_ServiceID.split(',');
            for (var i = 0; i < Arr.length; i++) {
                $("#ddlServices").multiselect("select", $.trim(Arr[i]));
            }
            $("#ddlServices").multiselect('rebuild');

            var $_ContractHolderId = '@ViewBag.ContractHolderId';
            var $_OperatingHolderId = '@ViewBag.OperatingHolderId';
            var $_ReportingTypeId = '@ViewBag.ReportingTypeId';
            var $_Years = "@ViewBag.Years";
            if($_ContractHolderId != null && $_ContractHolderId != "")
            {
                $("#ContractHolder").val($_ContractHolderId);
            }
            if($_OperatingHolderId != null && $_OperatingHolderId != "")
            {
                $("#OperatingHolder").val($_OperatingHolderId);
            }
            if($_ReportingTypeId != null && $_ReportingTypeId != "")
            {
                jQuery("select#ReportingType option[value="+$_ReportingTypeId+"]").attr("selected", "selected");
                $("#ReportingType").val($_ReportingTypeId);
            }
            if($_Years != "")
            {
                $(".YearsDiv").show();
            }
            else{
                $(".YearsDiv").hide();
            }
            if ('@ViewBag.AdditionalYears' == "True") {
                $(".YearsDiv").show();
            }
            else {
                $(".YearsDiv").hide();
            }
        }
        //Not In Use But will use
        $(".submitLocationData").show();
        $(".actions a[href$='#next']").html("");
        $(".actions a[href$='#finish']").html("");
        $(".actions a[href$='#next']").html("<i class='fa fa-long-arrow-right' aria-hidden='true' style='font-size: 33px;'></i>");
        $(".actions a[href$='#previous']").html("<i class='fa fa-long-arrow-left' aria-hidden='true' style='font-size: 33px;'></i>");
        $(".actions a[href$='#finish']").html("<input type='submit' class='btn btn-secondary submitLocationData btn-rounded' value='Submit'>");
    });
</script>

<script>
    $(document).ready(function () {
        //While change open pop up to match both contract holder or Operating company
        $(".Postal, .Phone").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                return false;
            }
        });
        $(".AddYears").change(function () {
            if ($(this).val() == "True") {
                $(".YearsDiv").show();
            }
            else {
                $(".YearsDiv").hide();
            }
        });
        //While change open pop up to match both contract holder or Operating company
        $("#ContractHolder").change(function ()
        {
            contractVal = $("#ContractHolder option:selected").val();
            var ContractType = $("#ContractHolder option:selected").attr('data-Type');
            if(ContractType == 2)
            {
                $("#myModalForContract").modal('show');
            }
            else
            {
                $('#OperatingHolder').removeAttr('disabled');
            }
        });
        //Add Sub Location
        $("#LocationType").change(function () {
            var value = this.value;
            if (value == "107") {
                $(".test").show();
                // BindLocationType();
            }
            else {
                $(".test").attr({ style: "display:none" });
            }
        });
        $('#ContractStartDate,#ContractEndDate,#ReportingDate,#IntercompanyInvoicing,#ClientInvoicingDate,#AutomaticBillingDate,#CutOffCardDate').datepicker({
            format: "mm/dd/yyyy",
            startDate: new Date()
        });
        //$("#ContractStartDate").change(function () {
        //    $("#datetimepicker").datepicker("destroy");
        //    $('#ContractEndDatepicker').datepicker({
        //        format: "mm/dd/yyyy",
        //        startDate: new Date($("#ContractStartDate").val())
        //    });
        //});


        $("#ContractEndDate").change(function () {
             var startDate = new Date($('#ContractStartDate').val());
             var endDate = new Date($('#ContractEndDate').val());
            if (endDate < startDate) {
                 alert("* End date must be Greater than start date")
                $('#ContractEndDate').val("");
                return false;
                //break;
             }
        });



        //$("#ContractEndDate").rules('add', { greaterThan: "#ContractStartDate" });

        //If Operating Company is same as contract company
        $('#YesForSameCompany').click( function () {
            $('#OperatingHolder').val(contractVal).trigger('change');
            $('#OperatingHolder').attr('disabled', 'disabled');
            $('#OperatingHolder').css('background-color', '#BBB8B7');
            $('#ContractDetailsModel_OperatingHolderSameId').val(contractVal);
        })
        //If Not
        $('#btnCancelForSameCompany').click( function () {
            $('#OperatingHolder').css('background-color', 'white');
            $('#OperatingHolder').removeAttr('disabled');
        });
        $('#Years').datepicker({
            minViewMode: 2,
            startDate: new Date(),
            format: 'yyyy'
        });
        var contractVal;

        //This perform multistep wizard functionality
        var navListItems = $('div.setup-panel div a'),
            allWells = $('.setup-content'),
            allNextBtn = $('.nextBtndata');
        allWells.hide();
        //Need to add validations
            navListItems.click(function (e) {
            if ($("#step-form-horizontal").valid({
                rules: {
             'PhoneNo': {
                required: true,
                positiveNumber: true
            }
            },
                messages: {
             'PhoneNo': {
                required: "This value is required",
                positiveNumber: "Positive numbers only please"
            }
            }
            })) {
                e.preventDefault();
                var $target = $($(this).attr('href')),
                    $item = $(this);

                if (!$item.hasClass('disabled')) {
                    navListItems.removeClass('btn-success').addClass('btn-default');
                    $item.addClass('btn-success');
                    allWells.hide();
                    $target.show();
                   // $target.find('input:eq(0)').focus();
                }
            }
        });

        allNextBtn.click(function () {
            if ($("#step-form-horizontal").valid({
                rules: {
             'PhoneNo': {
                required: true,
                positiveNumber: true
            }
            },
                messages: {
             'PhoneNo': {
                required: "Please enter Phone number",
                positiveNumber: "Positive numbers only please"
            }
            }
            })) {
                var curStep = $(this).closest(".setup-content"),
                    curStepBtn = curStep.attr("id"),
                    nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().next().children("a"),
                    curInputs = curStep.find("input[type='text'],input[type='url']"),
                    isValid = true;

                $(".form-group").removeClass("has-error");
                for (var i = 0; i < curInputs.length; i++) {
                    if (!curInputs[i].validity.valid) {
                        isValid = false;
                        $(curInputs[i]).closest(".form-group").addClass("has-error");
                    }
                }

                //if (isValid)
                    nextStepWizard.removeAttr('disabled').trigger('click');
            }
        });

        $('div.setup-panel div a.btn-success').trigger('click');
    });
    //Submit Location Data using AJAX because as per client requirement they dont want to refresh page
    $("#submitlocationData").click(function(e) {
        var i = 1;
        if ($("#step-form-horizontal").validate()){
            //prevent Default functionality
            //get the action-url of the form

            var dataObject = $("#step-form-horizontal").serialize()
            $("#submitlocationData").attr("disabled", true);
            //do your own request an handle the results
            if(i == 1)
            {
                i++;
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("LocationSetup", "GlobalAdmin")',
                    data : dataObject,
                    success: function (Data) {
                        $("#submitlocationData").attr("disabled", false);
                        var addNewUrl = "@Url.Action("ListLocation", "GlobalAdmin")";
                        $('#RenderPageId').load(addNewUrl);
                    },
                    error: function (err) {
                    }
                });
            }
        }
    });

    $('.SendToLoationList').click(function () {
            var addNewUrl = "@Url.Action("ListLocation", "GlobalAdmin")";
            $('#RenderPageId').load(addNewUrl);
    })


</script>
