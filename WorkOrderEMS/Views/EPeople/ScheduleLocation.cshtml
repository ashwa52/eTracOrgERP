@model WorkOrderEMS.Models.VMtbl_Staffing_Addition
@{
    ViewBag.Title = "Schedule Location";
    var isRefresh = ViewBag.IsPageRefresh;
    if (isRefresh == true)
    {
        Layout = "~/Views/Shared/_NewAdminLayout.cshtml";
    }
    else
    {
        Layout = null;
    }
    long locationId = 0;
    long userType = 0;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    string loginUserName = "", loginUserEmail = "", loginUserProfile = "";
    if (ObjLogin != null)
    {
        locationId = ObjLogin.LocationID;
        userType = ObjLogin.UserRoleId;
        loginUserName = ObjLogin.FName + "'s";
        loginUserEmail = ObjLogin.Email;
        loginUserProfile = ObjLogin.UserProfile;
    }
    Model.TSAM.EntryDate = System.DateTime.Now;

}
<style>
    .error {
        color: red;
    }

    .chk {
        margin-top: 10px !important;
    }

    .nextBtndata {
        border-radius: 25px;
        background-color: #0aa0cd;
    }

    .round {
        border-radius: 15px !important;
    }
</style>
@section scripts{
    <script type="text/javascript">
    var $_locationId = '@locationId';
    var $_userTypeId = '@userType';
    var $_VendorStatus = "false";
    </script>
}
<link href="@Url.Content("~/Content/datepicker.css")" rel="stylesheet" />
<link rel="stylesheet" href="@Url.Content("~/Content/Dashboard/plugins/timepicker/bootstrap-timepicker.min.css")" />
<link rel="stylesheet" href="@Url.Content("~/Scripts/Bootstrap-DateTimePicker/css/datetimepicker.css")" />



<div class="content-body">
    <div class="container-fluid" style="margin-top:20px;">
        <!-- row -->
        <div class="row">
            <div class="col-xl-12 col-xxl-12">
                <div class="card aos-init" data-aos="fade-up">
                    <div class="card-header headerSize" style="height: 45px;">
                        <h4 class="card-title" style="color:white;"><strong><i class="fa fa-sticky-note"></i> @ViewBag.Title</strong></h4>
                    </div>
                    <div class="card-body">

                        <form action="@Url.Action("CoverageMapFormate", "EPeople")" method="post" id="step-form-horizontal" class="step-form-horizontal">
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.TSAM.EventId)
                            @Html.HiddenFor(model => model.TSAM.UserLocation)
                            @*<section>
                                    <div class="basic-form">
                                        <div class="row">
                                            @Html.Label("Schedule Date", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4 form-group">
                                                @Html.TextBoxFor(model => model.TSAM.ScheduleDate, new { @Placeholder = "Schedule Date", @class = "form-control input-rounded required" })
                                            </div>
                                            @Html.Label("Location", new { @class = "col-sm-2 col-form-label" })
                                            <div class="col-sm-4 form-group">
                                                @Html.DropDownListFor(model => model.TSAM.Location, new SelectList(Model.ListLS, "SeatId", "LocationSeatName"), "--Select Leave Type--", new { @id = "SeatLocationType", @class = "form-control input-rounded required" })
                                            </div>
                                        </div>
                                    </div>
                                </section>*@

                            <section>
                                <div class="basic-form">
                                    <div class="row">
                                        @Html.Label("Head Count To Shift", new { @class = "col-sm-2 col-form-label pull-right" })
                                        <div class="col-sm-4 form-group">
                                            @Html.CheckBoxFor(model => model.TSAM.IsHCTS, new { @class = "chk pull-left" })
                                        </div>
                                        @Html.Label("Seat To Shift", new { @class = "col-sm-2 col-form-label pull-right" })
                                        <div class="col-sm-4 form-group">
                                            @Html.CheckBoxFor(model => model.TSAM.IsSTS, new { @class = "chk pull-left" })
                                        </div>
                                    </div>
                                </div>
                            </section>
                            <section>
                                <div class="basic-form">
                                    <div class="row">
                                        @Html.Label("Seat Location", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4 form-group">
                                            @Html.DropDownListFor(model => model.TSAM.Location, new SelectList(Model.ListLS, "SeatId", "LocationSeatName", Model.TSAM.Location), "--Select Seat Location Type--", new { @id = "SeatLocationType", @class = "form-control input-rounded required" })
                                        </div>
                                        @Html.Label("Head Count", new { @class = "col-sm-2 col-form-label" })
                                        <div class="col-sm-4 form-group">
                                            @Html.TextBoxFor(model => model.TSAM.HeadCnt, new { @Placeholder = "Head Count", @class = "form-control input-rounded required", @onkeypress = "javascript:return validInt(event,this.getAttribute('id'))" })
                                        </div>
                                    </div>
                                </div>
                            </section>
                            <section>
                                <table id="tblSubItem" class="table table-striped table-bordered table-hover">
                                    <thead>
                                        <tr>
                                            <th class="center">Employee</th>
                                            <th class="center">From Time</th>
                                            <th class="center">To Time</th>
                                            <th class="center">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tblLocationSeatHead">
                                        @foreach (var item in Model.listTSADM)
                                        {
                                            Html.RenderPartial("_LocationSeatHeadDetails", item);
                                        }
                                    </tbody>
                                </table>
                                <div class="col-md-12 pull-right">
                                    @*<a id="btnAddRows" class="btn btn-lg right">
                                            <i class="fa fa-plus"></i> Add More Items
                                        </a>*@
                                    @*<button type="button" class="btn btn-default bluebutton nxt-btn" value="AddRows" id="btnAddRows" style="background-color:cornflowerblue;border-radius:18px;color:white;"><i class="fa fa-plus"></i> Add More Items</button>*@
                                </div>
                            </section>
                            @*<div class="col-md-12" id="tblLocationSeatHead">

                                    @foreach (var item in Model.listTSADM)
                                    {
                                        Html.RenderPartial("_LocationSeatHeadDetails", item);
                                    }
                                    <div class="col-md-12 pull-right">
                                    </div>

                                </div>*@
                            <section>
                                <button type="button" id="btnback" class="btn btn-success center nextBtndata" style="margin-left: 10px;"><i class="fa fa-arrow-left"></i>&nbsp;&nbsp; Back To List</button>
                                <button type="button" id="btnsave" class="btn btn-success center nextBtndata" style="margin-left: 10px;">Submit&nbsp;&nbsp; <i class="fa fa-check"></i></button>
                            </section>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Styles.Render("~/Scripts/ClockPickerCss")
@Scripts.Render("~/Scripts/ClockPickerJs")

<script type="text/javascript" src="@Url.Content("~/Scripts/Bootstrap-DateTimePicker/js/bootstrap-datetimepicker.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")"></script>

<script type="text/javascript">
    function validInt(event) {
        if (event.keyCode == 13) {
            return true;
        }
        if (event.keyCode < 48 || event.keyCode > 57) {
            event.keyCode = 0;
            return false;
        }
    }
    $("#btnback").on("click", function (event) {
        event.preventDefault();
        var addNewUrl = "/EPeople/CoverageMapFormate";
        $('#RenderPageId').load(addNewUrl);
    });
    var itemIndex = 0;
    var CheckListDataAndTime = function (currid, LoopClass) {
        var currEmployee = $("#LocationSeatHeadDetailsList_" + currid + "__EmployeeId").val();
        var currFromTime = $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val();
        var currToTime = $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val();
        if (currFromTime != null && currToTime != null && currEmployee != "") {
            var CurrentFromTimeHr = parseInt(currFromTime.split(':')[0], 10)
            var CurrentFromTimeMin = parseInt(currFromTime.split(':')[1], 10)
            var CurrentToTimeHr = parseInt(currToTime.split(':')[0], 10)
            var CurrentToTimeMin = parseInt(currToTime.split(':')[1], 10)
            if (CurrentFromTimeHr == CurrentToTimeHr) {
                if (CurrentFromTimeMin > CurrentToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
                }
            }
            else if (CurrentFromTimeHr > CurrentToTimeHr) {
                $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
            }
        }
        $("." + LoopClass).each(function () {
            var id = $(this).data('id');
            if (currid != id) {
                var Employee = $("#LocationSeatHeadDetailsList_" + id + "__EmployeeId").val();
                var FromTime = $("#LocationSeatHeadDetailsList_" + id + "__FromTime").val();
                var ToTime = $("#LocationSeatHeadDetailsList_" + id + "__ToTime").val();
                //if (currFromTime != null && currToTime != null && Employee != "") {
                //    checkTimeDiff(currid, currFromTime, currToTime, FromTime, ToTime);
                //}
                //else
                if (currEmployee == Employee && Employee != "") {
                    if (currFromTime != "00:00:00") {
                        checkTimeDiff(currid, currFromTime, null, FromTime, ToTime);
                    }
                    if (currToTime != "00:00:00") {
                        checkTimeDiff(currid, null, currToTime, FromTime, ToTime);
                    }
                }
            }
        });
    }
    var checkTimeDiff = function (currid, CurrentFromTime, CurrentToTime, FromTime, ToTime) {
        var FromTimeHr = parseInt(FromTime.split(':')[0], 10)
        var FromTimeMin = parseInt(FromTime.split(':')[1], 10)
        var ToTimeHr = parseInt(ToTime.split(':')[0], 10)
        var ToTimeMin = parseInt(ToTime.split(':')[1], 10)
        if (CurrentFromTime != null) {
            var CurrentFromTimeHr = parseInt(CurrentFromTime.split(':')[0], 10)
            var CurrentFromTimeMin = parseInt(CurrentFromTime.split(':')[1], 10)
            if (FromTimeHr == CurrentFromTimeHr) {
                if (CurrentFromTimeMin > FromTimeMin && CurrentFromTimeMin < ToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val("00:00:00");
                }
                if (CurrentFromTimeMin == FromTimeMin || CurrentFromTimeMin == ToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val("00:00:00");
                }
            }
            else if (CurrentFromTime == ToTimeHr) {
                if (CurrentFromTimeMin < ToTimeMin && CurrentFromTimeMin > FromTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val("00:00:00");
                }
                if (CurrentFromTimeMin == FromTimeMin || CurrentFromTimeMin == ToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val("00:00:00");
                }
            }
            else if (FromTimeHr < CurrentFromTimeHr) {
                $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val("00:00:00");
            }
            else if (CurrentFromTimeHr > FromTimeHr) {
                $("#LocationSeatHeadDetailsList_" + currid + "__FromTime").val("00:00:00");
            }
        }
        if (CurrentToTime != null) {
            var CurrentToTimeHr = parseInt(CurrentToTime.split(':')[0], 10)
            var CurrentToTimeMin = parseInt(CurrentToTime.split(':')[1], 10)
            if (FromTimeHr == CurrentToTimeHr) {
                if (CurrentToTimeMin > FromTimeMin && CurrentToTimeMin < ToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
                }
                if (CurrentToTimeMin == FromTimeMin || CurrentToTimeMin == ToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
                }
            }
            else if (CurrentToTimeHr == ToTimeHr) {
                if (CurrentToTimeMin < ToTimeMin && CurrentToTimeMin > FromTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
                }
                if (CurrentToTimeMin == FromTimeMin || CurrentToTimeMin == ToTimeMin) {
                    $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
                }
            }
            else if (FromTimeHr < CurrentToTimeHr) {
                $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
            }
            else if (ToTimeHr > CurrentToTimeHr) {
                $("#LocationSeatHeadDetailsList_" + currid + "__ToTime").val("00:00:00");
            }
        }

    }
    var AddLocationSeatHeadList = function (itemIndex) {
        //var StrURL = $_HostPrefix + '/EPeople/AddLocationSeatHeadDetails?id=' + itemIndex + '&Location=' + '@locationId';
        var StrURL = '/EPeople/AddLocationSeatHeadDetails?id=' + itemIndex + '&Location=' + '@locationId'+'&fromtime='+'@ViewBag.Start'+'&endtime='+'@ViewBag.End';
        $.ajax({
            url: StrURL,
            cache: false,
            data: {},
            type: 'GET',
            success: function (html) {
                $("#tblLocationSeatHead").prepend(html);
                //$('.btnAddrows').each(function () {
                //    $(this).hide();
                //});
                $('.Add_' + itemIndex).show();
                $("#btnAddrows_" + itemIndex).on("click", function () {
                    console.log(itemIndex)
                    setTimeout(function () {
                        itemIndex = parseInt($("#tblLocationSeatHead input.iHidden").first().val());
                        itemIndex += 1;
                        AddLocationSeatHeadList(itemIndex);
                    }, 350);
                });
                $("#btnDeleterow_" + itemIndex).click(function () {
                    id = $(this).data('id');
                    $(".editorRow_" + id).remove();
                    //$('.btnAddrows').each(function () {
                    //    $(this).hide();
                    //});
                    //$('.Add_' + $("#tblLocationSeatHead input.iHidden").last().val()).show();
                    return false;
                });
                $(".form_datetime").datetimepicker({format: 'yyyy-mm-dd hh:ii'});
                $("#LocationSeatHeadDetailsList_" + itemIndex + "__EmployeeId").on("change", function () {
                    var currid = $(this).data('id');
                    var LoopClass = $(this).data('loop');
                    var Employee = $(this).val();
                    var StrURL = '/EPeople/GetScheduleEmployee?EmployeeId=' + Employee;
                    $.ajax({
                        url: StrURL,
                        cache: false,
                        data: {},
                        type: 'GET',
                        success: function (data) {
                            $("#LocationSeatHeadDetailsList_" + currid + "__FromDateTime").val(data["start"]);
                            $("#LocationSeatHeadDetailsList_" + currid + "__ToDateTime").val(data["end"]);
                        }
                    });

                    //CheckListDataAndTime(currid, LoopClass);
                });
                $("#LocationSeatHeadDetailsList_" + itemIndex + "__FromTime").on("change", function () {
                    var currid = $(this).data('id');
                    var LoopClass = $(this).data('loop');
                    CheckListDataAndTime(currid, LoopClass);
                });
                $("#LocationSeatHeadDetailsList_" + itemIndex + "__ToTime").on("change", function () {
                    var currid = $(this).data('id');
                    var LoopClass = $(this).data('loop');
                    CheckListDataAndTime(currid, LoopClass);
                });
            },
            error: function (exception) {
                //TosterNotification("error", errorResult(jqXHR, exception), "Error");
            }
        });
    }

    if (@Model.TSAM.EventId== 0) {
        AddLocationSeatHeadList(0);
    }

    $("#TSAM_HeadCnt").blur(function () {
        var loopcnt = $(this).val();
        itemIndex = parseInt($("#tblLocationSeatHead input.iHidden").first().val());
        for (var i = 1; i <= loopcnt; i++) {
            console.log(itemIndex)

                itemIndex += 1;

            AddLocationSeatHeadList(itemIndex);
        }
    });

    $("#btnsave").on("click", function (event) {
        if (!$("#step-form-horizontal").valid()) {
            return false;
        }
        else {
            //if (@Model.listTSADM != null && (!@Model.listTSADM.Any())) {
            $.ajax({
                type: 'POST',
                url: '/EPeople/ScheduleLocationSubmit',
                data: $("#step-form-horizontal").serialize(),
                success: function (data) {
                    var addNewUrl = "/EPeople/CoverageMapFormate";
                    $('#RenderPageId').load(addNewUrl);
                }
            });
                //}
        }
    });
    $(".chk").on("change", function () {
        $('.chk').prop('checked', false);
        $(this).prop('checked', true);
    });
    $(".form_datetime").datetimepicker({format: 'yyyy-mm-dd hh:ii'});
</script>