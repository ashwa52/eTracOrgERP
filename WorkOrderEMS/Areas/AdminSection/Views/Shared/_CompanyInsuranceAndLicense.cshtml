@model WorkOrderEMS.Models.VendorSetupManagementModel
@{
    long UserType = 0; bool GloblaAdminUser, ITAdminUser, OnlyAdminUser, ManagerUser, EmployeeUser, ClientUser;
    GloblaAdminUser = ITAdminUser = OnlyAdminUser = ManagerUser = EmployeeUser = ClientUser = false;
    WorkOrderEMS.Models.eTracLoginModel ObjLogin = (WorkOrderEMS.Models.eTracLoginModel)Session["eTrac"];
    if (ObjLogin != null)
    {
        UserType = ObjLogin.UserRoleId;
    }
    else
    {
        WorkOrderEMS.Helper.AlertMessageClass ObjAlertMessageClass = new WorkOrderEMS.Helper.AlertMessageClass();
        ViewBag.AlertMessageClass = ObjAlertMessageClass.Danger; ViewBag.Message = WorkOrderEMS.Helper.CommonMessage.SessionExpired();
        Response.Redirect("~/Views/Shared/_GlobalAdminLayout.cshtml");
    }

    string myModelprefix = ViewBag.myModelprefixName;
    string Controller = string.Empty, ActionName = string.Empty;
    string hostingPrefix = System.Configuration.ConfigurationManager.AppSettings["hostingPrefix"];
    string VendorInsuranceDocPath = System.Configuration.ConfigurationManager.AppSettings["CompanyDocuments"];

    //if (routeValues != null)
    //{
    //    if (routeValues.ContainsKey("controller"))
    //    {
    //        Controller = ViewContext.RouteData.GetRequiredString("controller");
    //        //Controller = routeValues["controller"].ToString();
    //    }
    //}
}
<style>
    .roundedtext {
        border-radius: 12px
    }

    ::-webkit-input-placeholder {
        font-style: italic;
    }

    :-moz-placeholder {
        font-style: italic;
    }

    ::-moz-placeholder {
        font-style: italic;
    }

    :-ms-input-placeholder {
        font-style: italic;
    }

    .top-row > div {
        float: left;
        width: 48%;
        margin-right: 4%;
    }

    input[type="radio"] {
        height: 20px;
        width: 20px;
        background-color: #4475b5;
        color: #4475b5;
    }
</style>
@Html.ValidationSummary(true)
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.maskedinput-1.3.min.js")"></script>
<div class="col-lg-12 col-md-12  col-sm-12  col-xs-12" id="myContractDetails">
    <div class="panel-body">
        <div class="row">
            <div class="form-horizontal">
                <div class="form">
                    <div class="top-row">
                        <div class="field-wrap">
                            <label style="font-size:16px;">
                                1) Is Company has certificate to Add?<span class="req">*</span>
                            </label>
                            <br /><br />
                            <span style="margin-left:50px;margin-top:-10px;">
                                @Html.RadioButtonFor(model => model.VendorInsuranceModel.IsCompanyCertificate, "YesCertificate", new { @id = "YesData" })&nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @Html.RadioButtonFor(model => model.VendorInsuranceModel.IsCompanyCertificate, "NoCertificate", new { @style = "margin-left:20%;",@id="NoData" })&nbsp;No
                                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.IsCompanyCertificate)
                            </span>
                        </div>
                        <div class="field-wrap" style="margin-top:20px;">
                            <input type="checkbox" id="myCheckbox" style="width:18px;height:18px;"/>
                               <label for="myCheckbox" class="myCheck">
                                  <span class="checkboxText" style="font-size:16px;margin-left:20px;">State License</span>
                               </label>
                        </div>
                    </div>
                    <br /><br />
                    <div class="top-row HideRowIfNo">
                        <div class="field-wrap">
                            <label id="lblLicenseName">
                                License Name<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorInsuranceModel.LicenseName, null, new { @id = "LicenseName" })
                            @Html.ValidationMessageFor(model => model.VendorInsuranceModel.LicenseName)
                        </div>
                        <div class="field-wrap">
                            <label>
                                License Number  <span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorInsuranceModel.LicenseNumber, null, new { @id = "LicenseNumber" })
                            @Html.ValidationMessageFor(model => model.VendorInsuranceModel.LicenseNumber)
                        </div>
                    </div>

                    <div class="top-row HideRowIfNo">
                        <div class="field-wrap">
                            <label>
                                Expiration Date<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorInsuranceModel.LicenseExpirationDate, null, new { @id = "LicenseExpirationDate", @onkeydown = "return false;" })
                            @Html.ValidationMessageFor(model => model.VendorInsuranceModel.LicenseExpirationDate)
                        </div>
                        <div class="field-wrap">
                            <label>
                                License Document<span class="req">*</span>
                            </label>
                            <div id="dvLicensePreview">
                            </div>
                            <input id="fileuploadLicense" type="file" style="margin-left:50%;" name="VendorInsuranceModel.LicenseDocumentFile" />
                            <ul class="attachment">
                                @if (Model.VendorInsuranceModel != null )
                                {
                                    <li style="margin-left :25%;margin-top:20px;">
                                        <a class="title" href="@Url.Content(VendorInsuranceDocPath + myModelprefix + "LicenseDocument")">@myModelprefix + "LicenseDocument"</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="top-row">
                        <div class="field-wrap">
                            <label style="font-size:16px;">
                                2) Is Insurance required?<span class="req">*</span>
                            </label>
                            <br /><br />
                            <span style="margin-left:50px;margin-top:-10px;">
                                @Html.RadioButtonFor(model => model.VendorInsuranceModel.IsInsuranceRequired, "YesInsurance")&nbsp;Yes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @Html.RadioButtonFor(model => model.VendorInsuranceModel.IsInsuranceRequired, "NoInsurance", new { @style = "margin-left:20%;" })&nbsp;No
                                @Html.ValidationMessageFor(model => model.VendorInsuranceModel.IsInsuranceRequired)
                            </span>
                        </div>
                    </div>
                    <br /><br />
                    <div class="top-row HideRowInsurance" style="display:none;">
                        <div class="field-wrap">
                            <label>
                                Insurance Carries<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorInsuranceModel.InsuranceCarries, null, new { @id = "InsuranceCarries" })
                            @Html.ValidationMessageFor(model => model.VendorInsuranceModel.InsuranceCarries)
                        </div>
                        <div class="field-wrap">
                            <label>
                                Policy Number  <span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorInsuranceModel.PolicyNumber, null, new { @id = "PolicyNumber" })
                            @Html.ValidationMessageFor(model => model.VendorInsuranceModel.PolicyNumber)
                        </div>
                    </div>
                    <div class="top-row HideRowInsurance" style="display:none;">
                        <div class="field-wrap">
                            <label>
                                Expiration Date<span class="req">*</span>
                            </label>
                            @Html.TextBoxFor(model => model.VendorInsuranceModel.InsuranceExpirationDate, null, new { @id = "InsuranceExpirationDate", @onkeydown = "return false;" })
                            @Html.ValidationMessageFor(model => model.VendorInsuranceModel.InsuranceExpirationDate)
                        </div>
                        <div class="field-wrap">
                            <label>
                                Insurance Document<span class="req">*</span>
                            </label>
                            <div id="dvInsurancePreview">
                            </div>
                            <input id="fileuploadInsurance" type="file" style="margin-left:50%;" name="VendorInsuranceModel.InsuranceDocumentFile" />
                            <ul class="attachment">
                                @if (Model.VendorInsuranceModel != null)
                                {
                                    <li style="margin-left :25%;margin-top:20px;">
                                        <a class="title" href="@Url.Content(VendorInsuranceDocPath + "InsuranceDocument")">@Model.VendorInsuranceModel.InsuranceDocument + "InsuranceDocument"</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        var contractVal;
        $('#myCheckbox').on('click', function () {
            if ($('#myCheckbox').is(':checked')) {
                var checkMessage = $(".checkboxText").text();
                $("#YesData"). prop("checked", true);
                $('#LicenseName').val(checkMessage)
                $('#lblLicenseName').addClass('active highlight');
                $('#LicenseName').attr('readonly', true);
                $('#LicenseName').css("background-color", "#EBEBE4");
            } else {
                $('#LicenseName').val("");
                $("#YesData"). prop("checked", false);
                $('#lblLicenseName').removeClass('active highlight');
                $("#male"). prop("checked", false);
                $('#LicenseName').attr('readonly', false);
                $('#LicenseName').css("background-color", "white");
            }
        });
        $("#ContractHolder").change(function ()
        {
           contractVal = $("#ContractHolder option:selected").val();
            $("#myModalForContract").modal('show');
        })
        $("input[type='radio']").change(function () {
            
            if ($(this).val() == "YesCertificate") {
                $(".HideRowIfNo").show();
            }
            else if ($(this).val() == "NoCertificate")
            {
                $(".HideRowIfNo").hide();
            }
            if ($(this).val() == "YesInsurance") {
                $(".HideRowInsurance").show();
            }
            else if ($(this).val() == "NoInsurance") {
                $(".HideRowInsurance").hide();
            }
            else if ($(this).val() == "Vendor") {
                
                $(".ContractExecutedByHideShow").show();
                $('.ContractExecutedClass').prop('checked', true);
            }
            else if ($(this).val() == "Own")
            {
                $(".ContractExecutedByHideShow").hide();
                $('.ContractExecutedClass').prop('checked', false);

            }
            else if($(this).val() == 1)
            {
                $('#myModalForContract').modal('show');
            }
            else if($(this).val() == 2)
            {
                $('#myModalForContract').modal('hide');
            }
        });
        $('#LicenseExpirationDate,#InsuranceExpirationDate').datepicker({
            format: "mm/dd/yyyy",
            startDate: new Date()
        });
        $(function () {
            $("#fileuploadLicense").change(function () {
                $("#dvLicensePreview").html("");
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.pdf|.doc|.txt)$/;
                if (regex.test($(this).val().toLowerCase())) {
                    if ($.browser.msie && parseFloat(jQuery.browser.version) <= 9.0) {
                        $("#dvLicensePreview").show();
                        $("#dvLicensePreview")[0].filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = $(this).val();
                    }
                    else {
                        if (typeof (FileReader) != "undefined") {
                            $("#dvLicensePreview").show();
                            $("#dvLicensePreview").append("<img />");
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $("#dvLicensePreview img").attr("src", e.target.result);
                            }
                            reader.readAsDataURL($(this)[0].files[0]);
                        } else {
                            alert("This browser does not support FileReader.");
                        }
                    }
                }
            })
            $("#fileuploadInsurance").change(function () {
                $("#dvInsurancePreview").html("");
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.pdf|.doc|.txt)$/;
                if (regex.test($(this).val().toLowerCase())) {
                    if ($.browser.msie && parseFloat(jQuery.browser.version) <= 9.0) {
                        $("#dvInsurancePreview").show();
                        $("#dvInsurancePreview")[0].filters.item("DXImageTransform.Microsoft.AlphaImageLoader").src = $(this).val();
                    }
                    else {
                        if (typeof (FileReader) != "undefined") {
                            $("#dvInsurancePreview").show();
                            $("#dvInsurancePreview").append("<img />");
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $("#dvInsurancePreview img").attr("src", e.target.result);
                            }
                            reader.readAsDataURL($(this)[0].files[0]);
                        } else {
                            alert("This browser does not support FileReader.");
                        }
                    }
                }
            })
        });

    });
</script>


